from ._compat import iteritems as iteritems, string_types as string_types
from .exceptions import TemplateNotFound as TemplateNotFound
from .utils import internalcode as internalcode, open_if_exists as open_if_exists
from _typeshed import Incomplete
from types import ModuleType

def split_template_path(template): ...

class BaseLoader:
    has_source_access: bool
    def get_source(self, environment, template) -> None: ...
    def list_templates(self) -> None: ...
    def load(self, environment, name, globals: Incomplete | None = None): ...

class FileSystemLoader(BaseLoader):
    searchpath: Incomplete
    encoding: Incomplete
    followlinks: Incomplete
    def __init__(self, searchpath, encoding: str = 'utf-8', followlinks: bool = False) -> None: ...
    def get_source(self, environment, template): ...
    def list_templates(self): ...

class PackageLoader(BaseLoader):
    encoding: Incomplete
    manager: Incomplete
    filesystem_bound: Incomplete
    provider: Incomplete
    package_path: Incomplete
    def __init__(self, package_name, package_path: str = 'templates', encoding: str = 'utf-8') -> None: ...
    def get_source(self, environment, template): ...
    def list_templates(self): ...

class DictLoader(BaseLoader):
    mapping: Incomplete
    def __init__(self, mapping) -> None: ...
    def get_source(self, environment, template): ...
    def list_templates(self): ...

class FunctionLoader(BaseLoader):
    load_func: Incomplete
    def __init__(self, load_func) -> None: ...
    def get_source(self, environment, template): ...

class PrefixLoader(BaseLoader):
    mapping: Incomplete
    delimiter: Incomplete
    def __init__(self, mapping, delimiter: str = '/') -> None: ...
    def get_loader(self, template): ...
    def get_source(self, environment, template): ...
    def load(self, environment, name, globals: Incomplete | None = None): ...
    def list_templates(self): ...

class ChoiceLoader(BaseLoader):
    loaders: Incomplete
    def __init__(self, loaders) -> None: ...
    def get_source(self, environment, template): ...
    def load(self, environment, name, globals: Incomplete | None = None): ...
    def list_templates(self): ...

class _TemplateModule(ModuleType): ...

class ModuleLoader(BaseLoader):
    has_source_access: bool
    module: Incomplete
    package_name: Incomplete
    def __init__(self, path) -> None: ...
    @staticmethod
    def get_template_key(name): ...
    @staticmethod
    def get_module_filename(name): ...
    def load(self, environment, name, globals: Incomplete | None = None): ...
