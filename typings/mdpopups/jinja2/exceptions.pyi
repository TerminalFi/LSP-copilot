from ._compat import PY2 as PY2, imap as imap, implements_to_string as implements_to_string, text_type as text_type
from _typeshed import Incomplete

class TemplateError(Exception):
    def __init__(self, message: Incomplete | None = None) -> None: ...
    @property
    def message(self): ...

class TemplateNotFound(IOError, LookupError, TemplateError):
    message: Incomplete
    name: Incomplete
    templates: Incomplete
    def __init__(self, name, message: Incomplete | None = None) -> None: ...

class TemplatesNotFound(TemplateNotFound):
    templates: Incomplete
    def __init__(self, names=(), message: Incomplete | None = None) -> None: ...

class TemplateSyntaxError(TemplateError):
    lineno: Incomplete
    name: Incomplete
    filename: Incomplete
    source: Incomplete
    translated: bool
    def __init__(self, message, lineno, name: Incomplete | None = None, filename: Incomplete | None = None) -> None: ...

class TemplateAssertionError(TemplateSyntaxError): ...
class TemplateRuntimeError(TemplateError): ...
class UndefinedError(TemplateRuntimeError): ...
class SecurityError(TemplateRuntimeError): ...
class FilterArgumentError(TemplateRuntimeError): ...
