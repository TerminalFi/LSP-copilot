from . import nodes as nodes
from ._compat import NativeStringIO as NativeStringIO, imap as imap, iteritems as iteritems, izip as izip, range_type as range_type, string_types as string_types, text_type as text_type
from .exceptions import TemplateAssertionError as TemplateAssertionError
from .idtracking import Symbols as Symbols, VAR_LOAD_ALIAS as VAR_LOAD_ALIAS, VAR_LOAD_PARAMETER as VAR_LOAD_PARAMETER, VAR_LOAD_RESOLVE as VAR_LOAD_RESOLVE, VAR_LOAD_UNDEFINED as VAR_LOAD_UNDEFINED
from .nodes import EvalContext as EvalContext
from .optimizer import Optimizer as Optimizer
from .utils import Markup as Markup, concat as concat, escape as escape
from .visitor import NodeVisitor as NodeVisitor
from _typeshed import Incomplete
from copy import deepcopy as deepcopy

operators: Incomplete
dict_item_iter: str
code_features: Incomplete
supports_yield_from: bool

def optimizeconst(f): ...
def generate(node, environment, name, filename, stream: Incomplete | None = None, defer_init: bool = False, optimized: bool = True): ...
def has_safe_repr(value): ...
def find_undeclared(nodes, names): ...

class MacroRef:
    node: Incomplete
    accesses_caller: bool
    accesses_kwargs: bool
    accesses_varargs: bool
    def __init__(self, node) -> None: ...

class Frame:
    eval_ctx: Incomplete
    symbols: Incomplete
    toplevel: bool
    rootlevel: bool
    require_output_check: Incomplete
    buffer: Incomplete
    block: Incomplete
    parent: Incomplete
    def __init__(self, eval_ctx, parent: Incomplete | None = None, level: Incomplete | None = None) -> None: ...
    def copy(self): ...
    def inner(self, isolated: bool = False): ...
    def soft(self): ...
    __copy__ = copy

class VisitorExit(RuntimeError): ...

class DependencyFinderVisitor(NodeVisitor):
    filters: Incomplete
    tests: Incomplete
    def __init__(self) -> None: ...
    def visit_Filter(self, node) -> None: ...
    def visit_Test(self, node) -> None: ...
    def visit_Block(self, node) -> None: ...

class UndeclaredNameVisitor(NodeVisitor):
    names: Incomplete
    undeclared: Incomplete
    def __init__(self, names) -> None: ...
    def visit_Name(self, node) -> None: ...
    def visit_Block(self, node) -> None: ...

class CompilerExit(Exception): ...

class CodeGenerator(NodeVisitor):
    environment: Incomplete
    name: Incomplete
    filename: Incomplete
    stream: Incomplete
    created_block_context: bool
    defer_init: Incomplete
    optimized: Incomplete
    optimizer: Incomplete
    import_aliases: Incomplete
    blocks: Incomplete
    extends_so_far: int
    has_known_extends: bool
    code_lineno: int
    tests: Incomplete
    filters: Incomplete
    debug_info: Incomplete
    def __init__(self, environment, name, filename, stream: Incomplete | None = None, defer_init: bool = False, optimized: bool = True) -> None: ...
    def fail(self, msg, lineno) -> None: ...
    def temporary_identifier(self): ...
    def buffer(self, frame) -> None: ...
    def return_buffer_contents(self, frame, force_unescaped: bool = False) -> None: ...
    def indent(self) -> None: ...
    def outdent(self, step: int = 1) -> None: ...
    def start_write(self, frame, node: Incomplete | None = None) -> None: ...
    def end_write(self, frame) -> None: ...
    def simple_write(self, s, frame, node: Incomplete | None = None) -> None: ...
    def blockvisit(self, nodes, frame) -> None: ...
    def write(self, x) -> None: ...
    def writeline(self, x, node: Incomplete | None = None, extra: int = 0) -> None: ...
    def newline(self, node: Incomplete | None = None, extra: int = 0) -> None: ...
    def signature(self, node, frame, extra_kwargs: Incomplete | None = None) -> None: ...
    def pull_dependencies(self, nodes) -> None: ...
    def enter_frame(self, frame) -> None: ...
    def leave_frame(self, frame, with_python_scope: bool = False) -> None: ...
    def func(self, name): ...
    def macro_body(self, node, frame): ...
    def macro_def(self, macro_ref, frame) -> None: ...
    def position(self, node): ...
    def dump_local_context(self, frame): ...
    def write_commons(self) -> None: ...
    def push_parameter_definitions(self, frame) -> None: ...
    def pop_parameter_definitions(self) -> None: ...
    def mark_parameter_stored(self, target) -> None: ...
    def push_context_reference(self, target) -> None: ...
    def pop_context_reference(self) -> None: ...
    def get_context_ref(self): ...
    def get_resolve_func(self): ...
    def derive_context(self, frame): ...
    def parameter_is_undeclared(self, target): ...
    def push_assign_tracking(self) -> None: ...
    def pop_assign_tracking(self, frame) -> None: ...
    def visit_Template(self, node, frame: Incomplete | None = None) -> None: ...
    def visit_Block(self, node, frame) -> None: ...
    def visit_Extends(self, node, frame) -> None: ...
    def visit_Include(self, node, frame) -> None: ...
    def visit_Import(self, node, frame) -> None: ...
    def visit_FromImport(self, node, frame) -> None: ...
    def visit_For(self, node, frame) -> None: ...
    def visit_If(self, node, frame) -> None: ...
    def visit_Macro(self, node, frame) -> None: ...
    def visit_CallBlock(self, node, frame) -> None: ...
    def visit_FilterBlock(self, node, frame) -> None: ...
    def visit_With(self, node, frame) -> None: ...
    def visit_ExprStmt(self, node, frame) -> None: ...
    def visit_Output(self, node, frame): ...
    def visit_Assign(self, node, frame) -> None: ...
    def visit_AssignBlock(self, node, frame) -> None: ...
    def visit_Name(self, node, frame) -> None: ...
    def visit_NSRef(self, node, frame) -> None: ...
    def visit_Const(self, node, frame) -> None: ...
    def visit_TemplateData(self, node, frame) -> None: ...
    def visit_Tuple(self, node, frame) -> None: ...
    def visit_List(self, node, frame) -> None: ...
    def visit_Dict(self, node, frame) -> None: ...
    def binop(operator, interceptable: bool = True): ...
    def uaop(operator, interceptable: bool = True): ...
    visit_Add: Incomplete
    visit_Sub: Incomplete
    visit_Mul: Incomplete
    visit_Div: Incomplete
    visit_FloorDiv: Incomplete
    visit_Pow: Incomplete
    visit_Mod: Incomplete
    visit_And: Incomplete
    visit_Or: Incomplete
    visit_Pos: Incomplete
    visit_Neg: Incomplete
    visit_Not: Incomplete
    def visit_Concat(self, node, frame) -> None: ...
    def visit_Compare(self, node, frame) -> None: ...
    def visit_Operand(self, node, frame) -> None: ...
    def visit_Getattr(self, node, frame) -> None: ...
    def visit_Getitem(self, node, frame) -> None: ...
    def visit_Slice(self, node, frame) -> None: ...
    def visit_Filter(self, node, frame) -> None: ...
    def visit_Test(self, node, frame) -> None: ...
    def visit_CondExpr(self, node, frame): ...
    def visit_Call(self, node, frame, forward_caller: bool = False) -> None: ...
    def visit_Keyword(self, node, frame) -> None: ...
    def visit_MarkSafe(self, node, frame) -> None: ...
    def visit_MarkSafeIfAutoescape(self, node, frame) -> None: ...
    def visit_EnvironmentAttribute(self, node, frame) -> None: ...
    def visit_ExtensionAttribute(self, node, frame) -> None: ...
    def visit_ImportedName(self, node, frame) -> None: ...
    def visit_InternalName(self, node, frame) -> None: ...
    def visit_ContextReference(self, node, frame) -> None: ...
    def visit_Continue(self, node, frame) -> None: ...
    def visit_Break(self, node, frame) -> None: ...
    def visit_Scope(self, node, frame) -> None: ...
    def visit_OverlayScope(self, node, frame) -> None: ...
    def visit_EvalContextModifier(self, node, frame) -> None: ...
    def visit_ScopedEvalContextModifier(self, node, frame) -> None: ...
