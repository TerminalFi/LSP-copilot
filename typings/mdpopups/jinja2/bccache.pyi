import marshal
from ._compat import BytesIO as BytesIO, PY2 as PY2, pickle as pickle, text_type as text_type
from .utils import open_if_exists as open_if_exists
from _typeshed import Incomplete

marshal_dump = marshal.dump
marshal_load = marshal.load
bc_version: int
bc_magic: Incomplete

class Bucket:
    environment: Incomplete
    key: Incomplete
    checksum: Incomplete
    def __init__(self, environment, key, checksum) -> None: ...
    code: Incomplete
    def reset(self) -> None: ...
    def load_bytecode(self, f) -> None: ...
    def write_bytecode(self, f) -> None: ...
    def bytecode_from_string(self, string) -> None: ...
    def bytecode_to_string(self): ...

class BytecodeCache:
    def load_bytecode(self, bucket) -> None: ...
    def dump_bytecode(self, bucket) -> None: ...
    def clear(self) -> None: ...
    def get_cache_key(self, name, filename: Incomplete | None = None): ...
    def get_source_checksum(self, source): ...
    def get_bucket(self, environment, name, filename, source): ...
    def set_bucket(self, bucket) -> None: ...

class FileSystemBytecodeCache(BytecodeCache):
    directory: Incomplete
    pattern: Incomplete
    def __init__(self, directory: Incomplete | None = None, pattern: str = '__jinja2_%s.cache') -> None: ...
    def load_bytecode(self, bucket) -> None: ...
    def dump_bytecode(self, bucket) -> None: ...
    def clear(self) -> None: ...

class MemcachedBytecodeCache(BytecodeCache):
    client: Incomplete
    prefix: Incomplete
    timeout: Incomplete
    ignore_memcache_errors: Incomplete
    def __init__(self, client, prefix: str = 'jinja2/bytecode/', timeout: Incomplete | None = None, ignore_memcache_errors: bool = True) -> None: ...
    def load_bytecode(self, bucket) -> None: ...
    def dump_bytecode(self, bucket) -> None: ...
