from .environment import TemplateModule as TemplateModule
from .runtime import LoopContextBase as LoopContextBase
from .utils import Markup as Markup, concat as concat, internalcode as internalcode
from _typeshed import Incomplete
from collections.abc import Generator

async def concat_async(async_gen): ...
async def generate_async(self, *args, **kwargs) -> Generator[Incomplete]: ...
def wrap_generate_func(original_generate): ...
async def render_async(self, *args, **kwargs): ...
def wrap_render_func(original_render): ...
def wrap_block_reference_call(original_call): ...
def wrap_macro_invoke(original_invoke): ...
async def get_default_module_async(self): ...
def wrap_default_module(original_default_module): ...
async def make_module_async(self, vars: Incomplete | None = None, shared: bool = False, locals: Incomplete | None = None): ...
def patch_template() -> None: ...
def patch_runtime() -> None: ...
def patch_filters() -> None: ...
def patch_all() -> None: ...
async def auto_await(value): ...
async def auto_aiter(iterable) -> Generator[Incomplete]: ...

class AsyncLoopContext(LoopContextBase):
    def __init__(self, async_iterator, undefined, after, length, recurse: Incomplete | None = None, depth0: int = 0) -> None: ...
    @property
    def length(self): ...
    def __aiter__(self): ...

class AsyncLoopContextIterator:
    context: Incomplete
    def __init__(self, context) -> None: ...
    def __aiter__(self): ...
    async def __anext__(self): ...

async def make_async_loop_context(iterable, undefined, recurse: Incomplete | None = None, depth0: int = 0): ...
