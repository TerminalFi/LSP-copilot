from ..markupsafe import EscapeFormatter as EscapeFormatter
from ._compat import PY2 as PY2, string_types as string_types
from .environment import Environment as Environment
from .exceptions import SecurityError as SecurityError
from .utils import Markup as Markup
from _typeshed import Incomplete
from collections import Mapping
from string import Formatter

MAX_RANGE: int
UNSAFE_FUNCTION_ATTRIBUTES: Incomplete
UNSAFE_METHOD_ATTRIBUTES: Incomplete
UNSAFE_GENERATOR_ATTRIBUTES: Incomplete
UNSAFE_COROUTINE_ATTRIBUTES: Incomplete
UNSAFE_ASYNC_GENERATOR_ATTRIBUTES: Incomplete

class _MagicFormatMapping(Mapping):
    def __init__(self, args, kwargs) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

def inspect_format_method(callable): ...
def safe_range(*args): ...
def unsafe(f): ...
def is_internal_attribute(obj, attr): ...
def modifies_known_mutable(obj, attr): ...

class SandboxedEnvironment(Environment):
    sandboxed: bool
    default_binop_table: Incomplete
    default_unop_table: Incomplete
    intercepted_binops: Incomplete
    intercepted_unops: Incomplete
    def intercept_unop(self, operator): ...
    binop_table: Incomplete
    unop_table: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def is_safe_attribute(self, obj, attr, value): ...
    def is_safe_callable(self, obj): ...
    def call_binop(self, context, operator, left, right): ...
    def call_unop(self, context, operator, arg): ...
    def getitem(self, obj, argument): ...
    def getattr(self, obj, attribute): ...
    def unsafe_undefined(self, obj, attribute): ...
    def format_string(self, s, args, kwargs, format_func: Incomplete | None = None): ...
    def call(__self, __context, __obj, /, *args, **kwargs): ...

class ImmutableSandboxedEnvironment(SandboxedEnvironment):
    def is_safe_attribute(self, obj, attr, value): ...

class SandboxedFormatterMixin:
    def __init__(self, env) -> None: ...
    def get_field(self, field_name, args, kwargs): ...

class SandboxedFormatter(SandboxedFormatterMixin, Formatter):
    def __init__(self, env) -> None: ...

class SandboxedEscapeFormatter(SandboxedFormatterMixin, EscapeFormatter):
    def __init__(self, env, escape) -> None: ...
