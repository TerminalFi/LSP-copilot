from ._compat import text_type
from .exceptions import TemplateNotFound as TemplateNotFound, TemplateRuntimeError as TemplateRuntimeError
from .utils import Markup as Markup, Namespace as Namespace, concat as concat, escape as escape, missing as missing
from _typeshed import Incomplete

__all__ = ['LoopContext', 'TemplateReference', 'Macro', 'Markup', 'TemplateRuntimeError', 'missing', 'concat', 'escape', 'markup_join', 'unicode_join', 'to_string', 'identity', 'TemplateNotFound', 'Namespace']

to_string = text_type
identity: Incomplete

def markup_join(seq): ...
def unicode_join(seq): ...

class TemplateReference:
    def __init__(self, context) -> None: ...
    def __getitem__(self, name): ...

class ContextMeta(type):
    def __new__(cls, name, bases, d): ...

class Context(Incomplete):
    parent: Incomplete
    vars: Incomplete
    environment: Incomplete
    eval_ctx: Incomplete
    exported_vars: Incomplete
    name: Incomplete
    blocks: Incomplete
    def __init__(self, environment, parent, name, blocks) -> None: ...
    def super(self, name, current): ...
    def get(self, key, default: Incomplete | None = None): ...
    def resolve(self, key): ...
    def resolve_or_missing(self, key): ...
    def get_exported(self): ...
    def get_all(self): ...
    def call(__self, __obj, /, *args, **kwargs): ...
    def derived(self, locals: Incomplete | None = None): ...
    keys: Incomplete
    values: Incomplete
    items: Incomplete
    def __contains__(self, name) -> bool: ...
    def __getitem__(self, key): ...

class BlockReference:
    name: Incomplete
    def __init__(self, name, context, stack, depth) -> None: ...
    @property
    def super(self): ...
    def __call__(self): ...

class LoopContextBase:
    index0: int
    depth0: Incomplete
    def __init__(self, undefined, recurse: Incomplete | None = None, depth0: int = 0) -> None: ...
    def cycle(self, *args): ...
    def changed(self, *value): ...
    first: Incomplete
    last: Incomplete
    index: Incomplete
    revindex: Incomplete
    revindex0: Incomplete
    depth: Incomplete
    @property
    def previtem(self): ...
    @property
    def nextitem(self): ...
    def __len__(self) -> int: ...
    def loop(self, iterable): ...
    __call__ = loop

class LoopContext(LoopContextBase):
    def __init__(self, iterable, undefined, recurse: Incomplete | None = None, depth0: int = 0) -> None: ...
    @property
    def length(self): ...
    def __iter__(self): ...

class LoopContextIterator:
    context: Incomplete
    def __init__(self, context) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...

class Macro:
    name: Incomplete
    arguments: Incomplete
    catch_kwargs: Incomplete
    catch_varargs: Incomplete
    caller: Incomplete
    explicit_caller: Incomplete
    def __init__(self, environment, func, name, arguments, catch_kwargs, catch_varargs, caller, default_autoescape: Incomplete | None = None) -> None: ...
    def __call__(self, *args, **kwargs): ...

class Undefined:
    def __init__(self, hint: Incomplete | None = None, obj=..., name: Incomplete | None = None, exc=...) -> None: ...
    def __getattr__(self, name): ...
    __add__: Incomplete
    __radd__: Incomplete
    __mul__: Incomplete
    __rmul__: Incomplete
    __div__: Incomplete
    __rdiv__: Incomplete
    __truediv__: Incomplete
    __rtruediv__: Incomplete
    __floordiv__: Incomplete
    __rfloordiv__: Incomplete
    __mod__: Incomplete
    __rmod__: Incomplete
    __pos__: Incomplete
    __neg__: Incomplete
    __call__: Incomplete
    __getitem__: Incomplete
    __lt__: Incomplete
    __le__: Incomplete
    __gt__: Incomplete
    __ge__: Incomplete
    __int__: Incomplete
    __float__: Incomplete
    __complex__: Incomplete
    __pow__: Incomplete
    __rpow__: Incomplete
    __sub__: Incomplete
    __rsub__: Incomplete
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    __bool__ = __nonzero__

class DebugUndefined(Undefined): ...

class StrictUndefined(Undefined):
    __iter__: Incomplete
    __len__: Incomplete
    __nonzero__: Incomplete
    __eq__: Incomplete
    __ne__: Incomplete
    __bool__: Incomplete
    __hash__: Incomplete
