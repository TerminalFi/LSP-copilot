from ..markupsafe import Markup as Markup, escape as escape, soft_unicode as soft_unicode
from ._compat import implements_iterator as implements_iterator, string_types as string_types, text_type as text_type, url_quote as url_quote
from _typeshed import Incomplete

missing: Incomplete
internal_code: Incomplete
concat: Incomplete

def contextfunction(f): ...
def evalcontextfunction(f): ...
def environmentfunction(f): ...
def internalcode(f): ...
def is_undefined(obj): ...
def consume(iterable) -> None: ...
def clear_caches() -> None: ...
def import_string(import_name, silent: bool = False): ...
def open_if_exists(filename, mode: str = 'rb'): ...
def object_type_repr(obj): ...
def pformat(obj, verbose: bool = False): ...
def urlize(text, trim_url_limit: Incomplete | None = None, rel: Incomplete | None = None, target: Incomplete | None = None): ...
def generate_lorem_ipsum(n: int = 5, html: bool = True, min: int = 20, max: int = 100): ...
def unicode_urlencode(obj, charset: str = 'utf-8', for_qs: bool = False): ...

class LRUCache:
    capacity: Incomplete
    def __init__(self, capacity) -> None: ...
    def __getnewargs__(self): ...
    def copy(self): ...
    def get(self, key, default: Incomplete | None = None): ...
    def setdefault(self, key, default: Incomplete | None = None): ...
    def clear(self) -> None: ...
    def __contains__(self, key) -> bool: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def items(self): ...
    def iteritems(self): ...
    def values(self): ...
    def itervalue(self): ...
    def keys(self): ...
    def iterkeys(self): ...
    __iter__ = iterkeys
    def __reversed__(self): ...
    __copy__ = copy

def select_autoescape(enabled_extensions=('html', 'htm', 'xml'), disabled_extensions=(), default_for_string: bool = True, default: bool = False): ...
def htmlsafe_json_dumps(obj, dumper: Incomplete | None = None, **kwargs): ...

class Cycler:
    items: Incomplete
    def __init__(self, *items) -> None: ...
    pos: int
    def reset(self) -> None: ...
    @property
    def current(self): ...
    def next(self): ...
    __next__ = next

class Joiner:
    sep: Incomplete
    used: bool
    def __init__(self, sep: str = ', ') -> None: ...
    def __call__(self): ...

class Namespace:
    def __init__(*args, **kwargs) -> None: ...
    def __getattribute__(self, name): ...
    def __setitem__(self, name, value) -> None: ...

have_async_gen: bool
