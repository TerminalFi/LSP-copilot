from ._compat import PY2 as PY2, imap as imap, iteritems as iteritems, string_types as string_types, text_type as text_type
from .exceptions import FilterArgumentError as FilterArgumentError
from .runtime import Undefined as Undefined
from .utils import Markup as Markup, escape as escape, htmlsafe_json_dumps as htmlsafe_json_dumps, pformat as pformat, soft_unicode as soft_unicode, unicode_urlencode as unicode_urlencode, urlize as urlize
from _typeshed import Incomplete
from collections.abc import Generator
from typing import NamedTuple

def contextfilter(f): ...
def evalcontextfilter(f): ...
def environmentfilter(f): ...
def ignore_case(value): ...
def make_attrgetter(environment, attribute, postprocess: Incomplete | None = None): ...
def do_forceescape(value): ...
def do_urlencode(value): ...
def do_replace(eval_ctx, s, old, new, count: Incomplete | None = None): ...
def do_upper(s): ...
def do_lower(s): ...
def do_xmlattr(_eval_ctx, d, autospace: bool = True): ...
def do_capitalize(s): ...
def do_title(s): ...
def do_dictsort(value, case_sensitive: bool = False, by: str = 'key', reverse: bool = False): ...
def do_sort(environment, value, reverse: bool = False, case_sensitive: bool = False, attribute: Incomplete | None = None): ...
def do_unique(environment, value, case_sensitive: bool = False, attribute: Incomplete | None = None) -> Generator[Incomplete]: ...
def do_min(environment, value, case_sensitive: bool = False, attribute: Incomplete | None = None): ...
def do_max(environment, value, case_sensitive: bool = False, attribute: Incomplete | None = None): ...
def do_default(value, default_value: str = '', boolean: bool = False): ...
def do_join(eval_ctx, value, d: str = '', attribute: Incomplete | None = None): ...
def do_center(value, width: int = 80): ...
def do_first(environment, seq): ...
def do_last(environment, seq): ...
def do_random(context, seq): ...
def do_filesizeformat(value, binary: bool = False): ...
def do_pprint(value, verbose: bool = False): ...
def do_urlize(eval_ctx, value, trim_url_limit: Incomplete | None = None, nofollow: bool = False, target: Incomplete | None = None, rel: Incomplete | None = None): ...
def do_indent(s, width: int = 4, first: bool = False, blank: bool = False, indentfirst: Incomplete | None = None): ...
def do_truncate(env, s, length: int = 255, killwords: bool = False, end: str = '...', leeway: Incomplete | None = None): ...
def do_wordwrap(environment, s, width: int = 79, break_long_words: bool = True, wrapstring: Incomplete | None = None): ...
def do_wordcount(s): ...
def do_int(value, default: int = 0, base: int = 10): ...
def do_float(value, default: float = 0.0): ...
def do_format(value, *args, **kwargs): ...
def do_trim(value): ...
def do_striptags(value): ...
def do_slice(value, slices, fill_with: Incomplete | None = None) -> Generator[Incomplete]: ...
def do_batch(value, linecount, fill_with: Incomplete | None = None) -> Generator[Incomplete]: ...
def do_round(value, precision: int = 0, method: str = 'common'): ...

class _GroupTuple(NamedTuple):
    grouper: Incomplete
    list: Incomplete

def do_groupby(environment, value, attribute): ...
def do_sum(environment, iterable, attribute: Incomplete | None = None, start: int = 0): ...
def do_list(value): ...
def do_mark_safe(value): ...
def do_mark_unsafe(value): ...
def do_reverse(value): ...
def do_attr(environment, obj, name): ...
def do_map(*args, **kwargs) -> Generator[Incomplete]: ...
def do_select(*args, **kwargs): ...
def do_reject(*args, **kwargs): ...
def do_selectattr(*args, **kwargs): ...
def do_rejectattr(*args, **kwargs): ...
def do_tojson(eval_ctx, value, indent: Incomplete | None = None): ...
def prepare_map(args, kwargs): ...
def prepare_select_or_reject(args, kwargs, modfunc, lookup_attr): ...
def select_or_reject(args, kwargs, modfunc, lookup_attr) -> Generator[Incomplete]: ...

FILTERS: Incomplete
