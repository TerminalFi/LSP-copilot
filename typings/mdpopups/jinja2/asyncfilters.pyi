from . import filters as filters
from .asyncsupport import auto_aiter as auto_aiter
from _typeshed import Incomplete
from collections.abc import Generator

async def auto_to_seq(value): ...
async def async_select_or_reject(args, kwargs, modfunc, lookup_attr) -> Generator[Incomplete]: ...
def dualfilter(normal_filter, async_filter): ...
def asyncfiltervariant(original): ...
async def do_first(environment, seq): ...
async def do_groupby(environment, value, attribute): ...
async def do_join(eval_ctx, value, d: str = '', attribute: Incomplete | None = None): ...
async def do_list(value): ...
async def do_reject(*args, **kwargs): ...
async def do_rejectattr(*args, **kwargs): ...
async def do_select(*args, **kwargs): ...
async def do_selectattr(*args, **kwargs): ...
async def do_map(*args, **kwargs) -> Generator[Incomplete]: ...
async def do_sum(environment, iterable, attribute: Incomplete | None = None, start: int = 0): ...
async def do_slice(value, slices, fill_with: Incomplete | None = None): ...

ASYNC_FILTERS: Incomplete
