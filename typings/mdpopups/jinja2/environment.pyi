from . import nodes as nodes
from ._compat import PY2 as PY2, PYPY as PYPY, encode_filename as encode_filename, ifilter as ifilter, imap as imap, implements_iterator as implements_iterator, implements_to_string as implements_to_string, iteritems as iteritems, reraise as reraise, string_types as string_types, text_type as text_type
from .compiler import CodeGenerator as CodeGenerator, generate as generate
from .defaults import BLOCK_END_STRING as BLOCK_END_STRING, BLOCK_START_STRING as BLOCK_START_STRING, COMMENT_END_STRING as COMMENT_END_STRING, COMMENT_START_STRING as COMMENT_START_STRING, DEFAULT_FILTERS as DEFAULT_FILTERS, DEFAULT_NAMESPACE as DEFAULT_NAMESPACE, DEFAULT_POLICIES as DEFAULT_POLICIES, DEFAULT_TESTS as DEFAULT_TESTS, KEEP_TRAILING_NEWLINE as KEEP_TRAILING_NEWLINE, LINE_COMMENT_PREFIX as LINE_COMMENT_PREFIX, LINE_STATEMENT_PREFIX as LINE_STATEMENT_PREFIX, LSTRIP_BLOCKS as LSTRIP_BLOCKS, NEWLINE_SEQUENCE as NEWLINE_SEQUENCE, TRIM_BLOCKS as TRIM_BLOCKS, VARIABLE_END_STRING as VARIABLE_END_STRING, VARIABLE_START_STRING as VARIABLE_START_STRING
from .exceptions import TemplateNotFound as TemplateNotFound, TemplateRuntimeError as TemplateRuntimeError, TemplateSyntaxError as TemplateSyntaxError, TemplatesNotFound as TemplatesNotFound
from .lexer import TokenStream as TokenStream, get_lexer as get_lexer
from .nodes import EvalContext as EvalContext
from .parser import Parser as Parser
from .runtime import Context as Context, Undefined as Undefined, new_context as new_context
from .utils import LRUCache as LRUCache, Markup as Markup, concat as concat, consume as consume, have_async_gen as have_async_gen, import_string as import_string, internalcode as internalcode, missing as missing
from _typeshed import Incomplete
from collections.abc import Generator

def get_spontaneous_environment(*args): ...
def create_cache(size): ...
def copy_cache(cache): ...
def load_extensions(environment, extensions): ...
def fail_for_missing_callable(string, name) -> None: ...

class Environment:
    sandboxed: bool
    overlayed: bool
    linked_to: Incomplete
    shared: bool
    exception_handler: Incomplete
    exception_formatter: Incomplete
    code_generator_class = CodeGenerator
    context_class = Context
    block_start_string: Incomplete
    block_end_string: Incomplete
    variable_start_string: Incomplete
    variable_end_string: Incomplete
    comment_start_string: Incomplete
    comment_end_string: Incomplete
    line_statement_prefix: Incomplete
    line_comment_prefix: Incomplete
    trim_blocks: Incomplete
    lstrip_blocks: Incomplete
    newline_sequence: Incomplete
    keep_trailing_newline: Incomplete
    undefined: Incomplete
    optimized: Incomplete
    finalize: Incomplete
    autoescape: Incomplete
    filters: Incomplete
    tests: Incomplete
    globals: Incomplete
    loader: Incomplete
    cache: Incomplete
    bytecode_cache: Incomplete
    auto_reload: Incomplete
    policies: Incomplete
    extensions: Incomplete
    enable_async: Incomplete
    is_async: Incomplete
    def __init__(self, block_start_string=..., block_end_string=..., variable_start_string=..., variable_end_string=..., comment_start_string=..., comment_end_string=..., line_statement_prefix=..., line_comment_prefix=..., trim_blocks=..., lstrip_blocks=..., newline_sequence=..., keep_trailing_newline=..., extensions=(), optimized: bool = True, undefined=..., finalize: Incomplete | None = None, autoescape: bool = False, loader: Incomplete | None = None, cache_size: int = 400, auto_reload: bool = True, bytecode_cache: Incomplete | None = None, enable_async: bool = False) -> None: ...
    def add_extension(self, extension) -> None: ...
    def extend(self, **attributes) -> None: ...
    def overlay(self, block_start_string=..., block_end_string=..., variable_start_string=..., variable_end_string=..., comment_start_string=..., comment_end_string=..., line_statement_prefix=..., line_comment_prefix=..., trim_blocks=..., lstrip_blocks=..., extensions=..., optimized=..., undefined=..., finalize=..., autoescape=..., loader=..., cache_size=..., auto_reload=..., bytecode_cache=...): ...
    lexer: Incomplete
    def iter_extensions(self): ...
    def getitem(self, obj, argument): ...
    def getattr(self, obj, attribute): ...
    def call_filter(self, name, value, args: Incomplete | None = None, kwargs: Incomplete | None = None, context: Incomplete | None = None, eval_ctx: Incomplete | None = None): ...
    def call_test(self, name, value, args: Incomplete | None = None, kwargs: Incomplete | None = None): ...
    def parse(self, source, name: Incomplete | None = None, filename: Incomplete | None = None): ...
    def lex(self, source, name: Incomplete | None = None, filename: Incomplete | None = None): ...
    def preprocess(self, source, name: Incomplete | None = None, filename: Incomplete | None = None): ...
    def compile(self, source, name: Incomplete | None = None, filename: Incomplete | None = None, raw: bool = False, defer_init: bool = False): ...
    def compile_expression(self, source, undefined_to_none: bool = True): ...
    def compile_templates(self, target, extensions: Incomplete | None = None, filter_func: Incomplete | None = None, zip: str = 'deflated', log_function: Incomplete | None = None, ignore_errors: bool = True, py_compile: bool = False) -> None: ...
    def list_templates(self, extensions: Incomplete | None = None, filter_func: Incomplete | None = None): ...
    def handle_exception(self, exc_info: Incomplete | None = None, rendered: bool = False, source_hint: Incomplete | None = None): ...
    def join_path(self, template, parent): ...
    def get_template(self, name, parent: Incomplete | None = None, globals: Incomplete | None = None): ...
    def select_template(self, names, parent: Incomplete | None = None, globals: Incomplete | None = None): ...
    def get_or_select_template(self, template_name_or_list, parent: Incomplete | None = None, globals: Incomplete | None = None): ...
    def from_string(self, source, globals: Incomplete | None = None, template_class: Incomplete | None = None): ...
    def make_globals(self, d): ...

class Template:
    def __new__(cls, source, block_start_string=..., block_end_string=..., variable_start_string=..., variable_end_string=..., comment_start_string=..., comment_end_string=..., line_statement_prefix=..., line_comment_prefix=..., trim_blocks=..., lstrip_blocks=..., newline_sequence=..., keep_trailing_newline=..., extensions=(), optimized: bool = True, undefined=..., finalize: Incomplete | None = None, autoescape: bool = False, enable_async: bool = False): ...
    @classmethod
    def from_code(cls, environment, code, globals, uptodate: Incomplete | None = None): ...
    @classmethod
    def from_module_dict(cls, environment, module_dict, globals): ...
    def render(self, *args, **kwargs): ...
    def render_async(self, *args, **kwargs) -> None: ...
    def stream(self, *args, **kwargs): ...
    def generate(self, *args, **kwargs) -> Generator[Incomplete]: ...
    def generate_async(self, *args, **kwargs) -> None: ...
    def new_context(self, vars: Incomplete | None = None, shared: bool = False, locals: Incomplete | None = None): ...
    def make_module(self, vars: Incomplete | None = None, shared: bool = False, locals: Incomplete | None = None): ...
    def make_module_async(self, vars: Incomplete | None = None, shared: bool = False, locals: Incomplete | None = None) -> None: ...
    @property
    def module(self): ...
    def get_corresponding_lineno(self, lineno): ...
    @property
    def is_up_to_date(self): ...
    @property
    def debug_info(self): ...

class TemplateModule:
    def __init__(self, template, context, body_stream: Incomplete | None = None) -> None: ...
    def __html__(self): ...

class TemplateExpression:
    def __init__(self, template, undefined_to_none) -> None: ...
    def __call__(self, *args, **kwargs): ...

class TemplateStream:
    def __init__(self, gen) -> None: ...
    def dump(self, fp, encoding: Incomplete | None = None, errors: str = 'strict') -> None: ...
    buffered: bool
    def disable_buffering(self) -> None: ...
    def enable_buffering(self, size: int = 5) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
