from ._compat import PY2 as PY2, iteritems as iteritems, reraise as reraise
from .exceptions import TemplateSyntaxError as TemplateSyntaxError
from .utils import internal_code as internal_code, missing as missing
from _typeshed import Incomplete

raise_helper: str

class TracebackFrameProxy:
    tb: Incomplete
    def __init__(self, tb) -> None: ...
    @property
    def tb_next(self): ...
    def set_next(self, next) -> None: ...
    @property
    def is_jinja_frame(self): ...
    def __getattr__(self, name): ...

def make_frame_proxy(frame): ...

class ProcessedTraceback:
    exc_type: Incomplete
    exc_value: Incomplete
    frames: Incomplete
    def __init__(self, exc_type, exc_value, frames) -> None: ...
    def render_as_text(self, limit: Incomplete | None = None): ...
    def render_as_html(self, full: bool = False): ...
    @property
    def is_template_syntax_error(self): ...
    @property
    def exc_info(self): ...
    @property
    def standard_exc_info(self): ...

def make_traceback(exc_info, source_hint: Incomplete | None = None): ...
def translate_syntax_error(error, source: Incomplete | None = None): ...
def translate_exception(exc_info, initial_skip: int = 0): ...
def get_jinja_locals(real_locals): ...
def fake_exc_info(exc_info, filename, lineno): ...

tb_set_next: Incomplete
