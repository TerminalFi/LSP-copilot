from . import nodes as nodes
from ._compat import imap as imap
from .exceptions import TemplateAssertionError as TemplateAssertionError, TemplateSyntaxError as TemplateSyntaxError
from .lexer import describe_token as describe_token, describe_token_expr as describe_token_expr
from _typeshed import Incomplete

class Parser:
    environment: Incomplete
    stream: Incomplete
    name: Incomplete
    filename: Incomplete
    closed: bool
    extensions: Incomplete
    def __init__(self, environment, source, name: Incomplete | None = None, filename: Incomplete | None = None, state: Incomplete | None = None) -> None: ...
    def fail(self, msg, lineno: Incomplete | None = None, exc=...) -> None: ...
    def fail_unknown_tag(self, name, lineno: Incomplete | None = None): ...
    def fail_eof(self, end_tokens: Incomplete | None = None, lineno: Incomplete | None = None): ...
    def is_tuple_end(self, extra_end_rules: Incomplete | None = None): ...
    def free_identifier(self, lineno: Incomplete | None = None): ...
    def parse_statement(self): ...
    def parse_statements(self, end_tokens, drop_needle: bool = False): ...
    def parse_set(self): ...
    def parse_for(self): ...
    def parse_if(self): ...
    def parse_with(self): ...
    def parse_autoescape(self): ...
    def parse_block(self): ...
    def parse_extends(self): ...
    def parse_import_context(self, node, default): ...
    def parse_include(self): ...
    def parse_import(self): ...
    def parse_from(self): ...
    def parse_signature(self, node) -> None: ...
    def parse_call_block(self): ...
    def parse_filter_block(self): ...
    def parse_macro(self): ...
    def parse_print(self): ...
    def parse_assign_target(self, with_tuple: bool = True, name_only: bool = False, extra_end_rules: Incomplete | None = None, with_namespace: bool = False): ...
    def parse_expression(self, with_condexpr: bool = True): ...
    def parse_condexpr(self): ...
    def parse_or(self): ...
    def parse_and(self): ...
    def parse_not(self): ...
    def parse_compare(self): ...
    def parse_math1(self): ...
    def parse_concat(self): ...
    def parse_math2(self): ...
    def parse_pow(self): ...
    def parse_unary(self, with_filter: bool = True): ...
    def parse_primary(self): ...
    def parse_tuple(self, simplified: bool = False, with_condexpr: bool = True, extra_end_rules: Incomplete | None = None, explicit_parentheses: bool = False): ...
    def parse_list(self): ...
    def parse_dict(self): ...
    def parse_postfix(self, node): ...
    def parse_filter_expr(self, node): ...
    def parse_subscript(self, node): ...
    def parse_subscribed(self): ...
    def parse_call(self, node): ...
    def parse_filter(self, node, start_inline: bool = False): ...
    def parse_test(self, node): ...
    def subparse(self, end_tokens: Incomplete | None = None): ...
    def parse(self): ...
