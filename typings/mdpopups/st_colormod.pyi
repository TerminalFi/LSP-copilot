from .coloraide import Color as Base, ColorMatch as ColorMatch, util as util
from .coloraide.css import parse as parse, serialize as serialize
from .coloraide.spaces.hwb.css import HWB as HWBORIG
from _typeshed import Incomplete

WHITE: Incomplete
BLACK: Incomplete
TOKENS: Incomplete
RE_ADJUSTERS: Incomplete
RE_HUE: Incomplete
RE_COLOR_START: Incomplete
RE_BLEND_END: Incomplete
RE_BRACKETS: Incomplete
RE_MIN_CONTRAST_END: Incomplete
RE_VARS: Incomplete
HWB_MATCH: Incomplete

def bracket_match(match, string, start, fullmatch): ...
def validate_vars(var, good_vars) -> None: ...
def handle_vars(string, variables, parents: Incomplete | None = None): ...

class HWB(HWBORIG):
    @classmethod
    def match(cls, string, start: int = 0, fullmatch: bool = True): ...
    @classmethod
    def to_string(cls, parent, *, alpha: Incomplete | None = None, precision: Incomplete | None = None, fit: bool = True, none: bool = False, **kwargs) -> str: ...

class ColorMod:
    OP_MAP: Incomplete
    adjusting: bool
    fullmatch: Incomplete
    def __init__(self, fullmatch: bool = True) -> None: ...
    def adjust_base(self, base, string) -> None: ...
    def adjust(self, string, start: int = 0): ...
    def process_alpha(self, m, hue): ...
    def process_hwb_hsl_channels(self, name, m, hue): ...
    def process_blend(self, m, string, hue): ...
    def process_min_contrast(self, m, string, hue): ...
    def min_contrast(self, color1, color2, target) -> None: ...
    def blend(self, color, percent, alpha: bool = False, space: str = 'srgb') -> None: ...
    def alpha(self, value, op: str = '') -> None: ...
    def lightness(self, value, op: str = '', hue: Incomplete | None = None) -> None: ...
    def saturation(self, value, op: str = '', hue: Incomplete | None = None) -> None: ...

class Color(Base):
    def __init__(self, color, data: Incomplete | None = None, alpha=..., *, variables: Incomplete | None = None, **kwargs) -> None: ...
    @classmethod
    def match(cls, string: str, start: int = 0, fullmatch: bool = False): ...
    def new(self, color, data: Incomplete | None = None, alpha=..., *, variables: Incomplete | None = None, **kwargs): ...
    def update(self, color, data: Incomplete | None = None, alpha=..., *, variables: Incomplete | None = None, **kwargs): ...
    def mutate(self, color, data: Incomplete | None = None, alpha=..., *, variables: Incomplete | None = None, **kwargs): ...
