import string
from ._compat import Mapping, text_type
from ._native import escape as escape, escape_silent as escape_silent, soft_unicode as soft_unicode
from _typeshed import Incomplete

__all__ = ['Markup', 'soft_unicode', 'escape', 'escape_silent', 'soft_str']

class Markup(text_type):
    def __new__(cls, base: str = '', encoding: Incomplete | None = None, errors: str = 'strict'): ...
    def __html__(self): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, num): ...
    __rmul__ = __mul__
    def __mod__(self, arg): ...
    def join(self, seq): ...
    def split(self, *args, **kwargs): ...
    def rsplit(self, *args, **kwargs): ...
    def splitlines(self, *args, **kwargs): ...
    def unescape(self): ...
    def striptags(self): ...
    @classmethod
    def escape(cls, s): ...
    def make_simple_escaping_wrapper(name): ...
    def partition(self, sep): ...
    def rpartition(self, sep): ...
    def format(self, *args, **kwargs): ...
    def __html_format__(self, format_spec): ...
    __getslice__: Incomplete

class _MagicFormatMapping(Mapping):
    def __init__(self, args, kwargs) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class EscapeFormatter(string.Formatter):
    escape: Incomplete
    def __init__(self, escape) -> None: ...
    def format_field(self, value, format_spec): ...

class _MarkupEscapeHelper:
    obj: Incomplete
    escape: Incomplete
    def __init__(self, obj, escape) -> None: ...
    def __getitem__(self, item): ...
    __unicode__: Incomplete
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
soft_str = soft_unicode
