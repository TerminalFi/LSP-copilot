from .error import *
from .nodes import *
from _typeshed import Incomplete

__all__ = ['BaseRepresenter', 'SafeRepresenter', 'Representer', 'RepresenterError']

class RepresenterError(YAMLError): ...

class BaseRepresenter:
    yaml_representers: Incomplete
    yaml_multi_representers: Incomplete
    default_style: Incomplete
    sort_keys: Incomplete
    default_flow_style: Incomplete
    represented_objects: Incomplete
    object_keeper: Incomplete
    alias_key: Incomplete
    def __init__(self, default_style: Incomplete | None = None, default_flow_style: bool = False, sort_keys: bool = True) -> None: ...
    def represent(self, data) -> None: ...
    def represent_data(self, data): ...
    @classmethod
    def add_representer(cls, data_type, representer) -> None: ...
    @classmethod
    def add_multi_representer(cls, data_type, representer) -> None: ...
    def represent_scalar(self, tag, value, style: Incomplete | None = None): ...
    def represent_sequence(self, tag, sequence, flow_style: Incomplete | None = None): ...
    def represent_mapping(self, tag, mapping, flow_style: Incomplete | None = None): ...
    def ignore_aliases(self, data): ...

class SafeRepresenter(BaseRepresenter):
    def ignore_aliases(self, data): ...
    def represent_none(self, data): ...
    def represent_str(self, data): ...
    def represent_binary(self, data): ...
    def represent_bool(self, data): ...
    def represent_int(self, data): ...
    inf_value: float
    def represent_float(self, data): ...
    def represent_list(self, data): ...
    def represent_dict(self, data): ...
    def represent_set(self, data): ...
    def represent_date(self, data): ...
    def represent_datetime(self, data): ...
    def represent_yaml_object(self, tag, data, cls, flow_style: Incomplete | None = None): ...
    def represent_undefined(self, data) -> None: ...

class Representer(SafeRepresenter):
    def represent_complex(self, data): ...
    def represent_tuple(self, data): ...
    def represent_name(self, data): ...
    def represent_module(self, data): ...
    def represent_object(self, data): ...
    def represent_ordered_dict(self, data): ...
