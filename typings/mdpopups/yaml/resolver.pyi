from .error import *
from .nodes import *
from _typeshed import Incomplete

__all__ = ['BaseResolver', 'Resolver']

class ResolverError(YAMLError): ...

class BaseResolver:
    DEFAULT_SCALAR_TAG: str
    DEFAULT_SEQUENCE_TAG: str
    DEFAULT_MAPPING_TAG: str
    yaml_implicit_resolvers: Incomplete
    yaml_path_resolvers: Incomplete
    resolver_exact_paths: Incomplete
    resolver_prefix_paths: Incomplete
    def __init__(self) -> None: ...
    @classmethod
    def add_implicit_resolver(cls, tag, regexp, first) -> None: ...
    @classmethod
    def add_path_resolver(cls, tag, path, kind: Incomplete | None = None) -> None: ...
    def descend_resolver(self, current_node, current_index) -> None: ...
    def ascend_resolver(self) -> None: ...
    def check_resolver_prefix(self, depth, path, kind, current_node, current_index): ...
    def resolve(self, kind, value, implicit): ...

class Resolver(BaseResolver): ...
