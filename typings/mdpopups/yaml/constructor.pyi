from .error import *
from .nodes import *
from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['BaseConstructor', 'SafeConstructor', 'FullConstructor', 'UnsafeConstructor', 'Constructor', 'ConstructorError']

class ConstructorError(MarkedYAMLError): ...

class BaseConstructor:
    yaml_constructors: Incomplete
    yaml_multi_constructors: Incomplete
    constructed_objects: Incomplete
    recursive_objects: Incomplete
    state_generators: Incomplete
    deep_construct: bool
    def __init__(self) -> None: ...
    def check_data(self): ...
    def get_data(self): ...
    def get_single_data(self): ...
    def construct_document(self, node): ...
    def construct_object(self, node, deep: bool = False): ...
    def construct_scalar(self, node): ...
    def construct_sequence(self, node, deep: bool = False): ...
    def construct_mapping(self, node, deep: bool = False): ...
    def construct_pairs(self, node, deep: bool = False): ...
    @classmethod
    def add_constructor(cls, tag, constructor) -> None: ...
    @classmethod
    def add_multi_constructor(cls, tag_prefix, multi_constructor) -> None: ...

class SafeConstructor(BaseConstructor):
    def construct_scalar(self, node): ...
    def flatten_mapping(self, node) -> None: ...
    def construct_mapping(self, node, deep: bool = False): ...
    def construct_yaml_null(self, node) -> None: ...
    bool_values: Incomplete
    def construct_yaml_bool(self, node): ...
    def construct_yaml_int(self, node): ...
    inf_value: float
    nan_value: Incomplete
    def construct_yaml_float(self, node): ...
    def construct_yaml_binary(self, node): ...
    timestamp_regexp: Incomplete
    def construct_yaml_timestamp(self, node): ...
    def construct_yaml_omap(self, node) -> Generator[Incomplete]: ...
    def construct_yaml_pairs(self, node) -> Generator[Incomplete]: ...
    def construct_yaml_set(self, node) -> Generator[Incomplete]: ...
    def construct_yaml_str(self, node): ...
    def construct_yaml_seq(self, node) -> Generator[Incomplete]: ...
    def construct_yaml_map(self, node) -> Generator[Incomplete]: ...
    def construct_yaml_object(self, node, cls) -> Generator[Incomplete]: ...
    def construct_undefined(self, node) -> None: ...

class FullConstructor(SafeConstructor):
    def construct_python_str(self, node): ...
    def construct_python_unicode(self, node): ...
    def construct_python_bytes(self, node): ...
    def construct_python_long(self, node): ...
    def construct_python_complex(self, node): ...
    def construct_python_tuple(self, node): ...
    def find_python_module(self, name, mark, unsafe: bool = False): ...
    def find_python_name(self, name, mark, unsafe: bool = False): ...
    def construct_python_name(self, suffix, node): ...
    def construct_python_module(self, suffix, node): ...
    def make_python_instance(self, suffix, node, args: Incomplete | None = None, kwds: Incomplete | None = None, newobj: bool = False, unsafe: bool = False): ...
    def set_python_instance_state(self, instance, state) -> None: ...
    def construct_python_object(self, suffix, node) -> Generator[Incomplete]: ...
    def construct_python_object_apply(self, suffix, node, newobj: bool = False): ...
    def construct_python_object_new(self, suffix, node): ...

class UnsafeConstructor(FullConstructor):
    def find_python_module(self, name, mark): ...
    def find_python_name(self, name, mark): ...
    def make_python_instance(self, suffix, node, args: Incomplete | None = None, kwds: Incomplete | None = None, newobj: bool = False): ...

class Constructor(UnsafeConstructor): ...
