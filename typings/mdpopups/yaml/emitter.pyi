from .events import *
from .error import YAMLError
from _typeshed import Incomplete

__all__ = ['Emitter', 'EmitterError']

class EmitterError(YAMLError): ...

class ScalarAnalysis:
    scalar: Incomplete
    empty: Incomplete
    multiline: Incomplete
    allow_flow_plain: Incomplete
    allow_block_plain: Incomplete
    allow_single_quoted: Incomplete
    allow_double_quoted: Incomplete
    allow_block: Incomplete
    def __init__(self, scalar, empty, multiline, allow_flow_plain, allow_block_plain, allow_single_quoted, allow_double_quoted, allow_block) -> None: ...

class Emitter:
    DEFAULT_TAG_PREFIXES: Incomplete
    stream: Incomplete
    encoding: Incomplete
    states: Incomplete
    state: Incomplete
    events: Incomplete
    event: Incomplete
    indents: Incomplete
    indent: Incomplete
    flow_level: int
    root_context: bool
    sequence_context: bool
    mapping_context: bool
    simple_key_context: bool
    line: int
    column: int
    whitespace: bool
    indention: bool
    open_ended: bool
    canonical: Incomplete
    allow_unicode: Incomplete
    best_indent: int
    best_width: int
    best_line_break: str
    tag_prefixes: Incomplete
    prepared_anchor: Incomplete
    prepared_tag: Incomplete
    analysis: Incomplete
    style: Incomplete
    def __init__(self, stream, canonical: Incomplete | None = None, indent: Incomplete | None = None, width: Incomplete | None = None, allow_unicode: Incomplete | None = None, line_break: Incomplete | None = None) -> None: ...
    def dispose(self) -> None: ...
    def emit(self, event) -> None: ...
    def need_more_events(self): ...
    def need_events(self, count): ...
    def increase_indent(self, flow: bool = False, indentless: bool = False) -> None: ...
    def expect_stream_start(self) -> None: ...
    def expect_nothing(self) -> None: ...
    def expect_first_document_start(self): ...
    def expect_document_start(self, first: bool = False) -> None: ...
    def expect_document_end(self) -> None: ...
    def expect_document_root(self) -> None: ...
    def expect_node(self, root: bool = False, sequence: bool = False, mapping: bool = False, simple_key: bool = False) -> None: ...
    def expect_alias(self) -> None: ...
    def expect_scalar(self) -> None: ...
    def expect_flow_sequence(self) -> None: ...
    def expect_first_flow_sequence_item(self) -> None: ...
    def expect_flow_sequence_item(self) -> None: ...
    def expect_flow_mapping(self) -> None: ...
    def expect_first_flow_mapping_key(self) -> None: ...
    def expect_flow_mapping_key(self) -> None: ...
    def expect_flow_mapping_simple_value(self) -> None: ...
    def expect_flow_mapping_value(self) -> None: ...
    def expect_block_sequence(self) -> None: ...
    def expect_first_block_sequence_item(self): ...
    def expect_block_sequence_item(self, first: bool = False) -> None: ...
    def expect_block_mapping(self) -> None: ...
    def expect_first_block_mapping_key(self): ...
    def expect_block_mapping_key(self, first: bool = False) -> None: ...
    def expect_block_mapping_simple_value(self) -> None: ...
    def expect_block_mapping_value(self) -> None: ...
    def check_empty_sequence(self): ...
    def check_empty_mapping(self): ...
    def check_empty_document(self): ...
    def check_simple_key(self): ...
    def process_anchor(self, indicator) -> None: ...
    def process_tag(self) -> None: ...
    def choose_scalar_style(self): ...
    def process_scalar(self) -> None: ...
    def prepare_version(self, version): ...
    def prepare_tag_handle(self, handle): ...
    def prepare_tag_prefix(self, prefix): ...
    def prepare_tag(self, tag): ...
    def prepare_anchor(self, anchor): ...
    def analyze_scalar(self, scalar): ...
    def flush_stream(self) -> None: ...
    def write_stream_start(self) -> None: ...
    def write_stream_end(self) -> None: ...
    def write_indicator(self, indicator, need_whitespace, whitespace: bool = False, indention: bool = False) -> None: ...
    def write_indent(self) -> None: ...
    def write_line_break(self, data: Incomplete | None = None) -> None: ...
    def write_version_directive(self, version_text) -> None: ...
    def write_tag_directive(self, handle_text, prefix_text) -> None: ...
    def write_single_quoted(self, text, split: bool = True) -> None: ...
    ESCAPE_REPLACEMENTS: Incomplete
    def write_double_quoted(self, text, split: bool = True) -> None: ...
    def determine_block_hints(self, text): ...
    def write_folded(self, text) -> None: ...
    def write_literal(self, text) -> None: ...
    def write_plain(self, text, split: bool = True) -> None: ...
