from ..lexer import ExtendedRegexLexer, RegexLexer
from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['DuelLexer', 'SlimLexer', 'XQueryLexer', 'QmlLexer', 'CirruLexer']

class DuelLexer(RegexLexer):
    name: str
    aliases: Incomplete
    filenames: Incomplete
    mimetypes: Incomplete
    flags: Incomplete
    tokens: Incomplete

class XQueryLexer(ExtendedRegexLexer):
    name: str
    aliases: Incomplete
    filenames: Incomplete
    mimetypes: Incomplete
    xquery_parse_state: Incomplete
    ncnamestartchar: str
    ncnamechar: Incomplete
    ncname: Incomplete
    pitarget_namestartchar: str
    pitarget_namechar: Incomplete
    pitarget: Incomplete
    prefixedname: Incomplete
    unprefixedname = ncname
    qname: Incomplete
    entityref: str
    charref: str
    stringdouble: Incomplete
    stringsingle: Incomplete
    elementcontentchar: str
    quotattrcontentchar: str
    aposattrcontentchar: str
    flags: Incomplete
    def punctuation_root_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def operator_root_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def popstate_tag_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def popstate_xmlcomment_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def popstate_kindtest_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def popstate_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_element_content_starttag_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_cdata_section_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_starttag_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_order_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_root_validate(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_root_validate_withmode(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_processing_instruction_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_element_content_processing_instruction_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_element_content_cdata_section_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_cdata_section_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_element_content_xmlcomment_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_xmlcomment_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_kindtest_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_kindtestforpi_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_kindtest_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_occurrenceindicator_kindtest_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_starttag_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_root_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_root_construct_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_root_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_attribute_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    def pushstate_operator_callback(lexer, match, ctx) -> Generator[Incomplete]: ...
    tokens: Incomplete

class QmlLexer(RegexLexer):
    name: str
    aliases: Incomplete
    filenames: Incomplete
    mimetypes: Incomplete
    flags: Incomplete
    tokens: Incomplete

class CirruLexer(RegexLexer):
    name: str
    aliases: Incomplete
    filenames: Incomplete
    mimetypes: Incomplete
    flags: Incomplete
    tokens: Incomplete

class SlimLexer(ExtendedRegexLexer):
    name: str
    aliases: Incomplete
    filenames: Incomplete
    mimetypes: Incomplete
    flags: Incomplete
    tokens: Incomplete
