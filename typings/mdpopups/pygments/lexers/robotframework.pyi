from ..lexer import Lexer
from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['RobotFrameworkLexer']

class RobotFrameworkLexer(Lexer):
    name: str
    aliases: Incomplete
    filenames: Incomplete
    mimetypes: Incomplete
    def __init__(self, **options) -> None: ...
    def get_tokens_unprocessed(self, text) -> Generator[Incomplete]: ...

class VariableTokenizer:
    def tokenize(self, string, token) -> Generator[Incomplete]: ...

class RowTokenizer:
    def __init__(self) -> None: ...
    def tokenize(self, row) -> Generator[Incomplete]: ...

class RowSplitter:
    def split(self, row) -> Generator[Incomplete]: ...

class Tokenizer:
    def __init__(self) -> None: ...
    def tokenize(self, value): ...

class Comment(Tokenizer): ...

class Setting(Tokenizer):
    def __init__(self, template_setter: Incomplete | None = None) -> None: ...

class ImportSetting(Tokenizer): ...
class TestCaseSetting(Setting): ...
class KeywordSetting(TestCaseSetting): ...
class Variable(Tokenizer): ...

class KeywordCall(Tokenizer):
    def __init__(self, support_assign: bool = True) -> None: ...

class GherkinTokenizer:
    def tokenize(self, value, token): ...

class TemplatedKeywordCall(Tokenizer): ...

class ForLoop(Tokenizer):
    def __init__(self) -> None: ...

class _Table:
    def __init__(self, prev_tokenizer: Incomplete | None = None) -> None: ...
    def tokenize(self, value, index) -> Generator[Incomplete]: ...
    def end_row(self) -> None: ...

class UnknownTable(_Table): ...
class VariableTable(_Table): ...

class SettingTable(_Table):
    def __init__(self, template_setter, prev_tokenizer: Incomplete | None = None) -> None: ...
    def end_row(self) -> None: ...

class TestCaseTable(_Table):
    def set_test_template(self, template) -> None: ...
    def set_default_template(self, template) -> None: ...

class KeywordTable(TestCaseTable): ...

class VariableSplitter:
    identifier: Incomplete
    base: Incomplete
    index: Incomplete
    start: int
    end: int
    def __init__(self, string, identifiers) -> None: ...
    def get_replaced_base(self, variables): ...
