import sublime
from . import markdown
from _typeshed import Incomplete

HTML_SHEET_SUPPORT: Incomplete
LOCATION: Incomplete
DEFAULT_CSS_PATH: Incomplete
DEFAULT_CSS: str
OLD_DEFAULT_CSS: str
DEFAULT_USER_CSS: str
IDK: str
HL_SETTING: str
STYLE_SETTING: str
RE_BAD_ENTITIES: Incomplete
NODEBUG: int
ERROR: int
WARNING: int
INFO: int

class _MdWrapper(markdown.Markdown):
    Meta: Incomplete
    sublime_wrap: Incomplete
    plugin_map: Incomplete
    sublime_hl: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def registerExtensions(self, extensions, configs): ...

def version(): ...
def md2html(view, markup, template_vars: Incomplete | None = None, template_env_options: Incomplete | None = None, **kwargs): ...
def color_box(colors, border: str = '#000000ff', border2: Incomplete | None = None, height: int = 32, width: int = 32, border_size: int = 1, check_size: int = 4, max_colors: int = 5, alpha: bool = False, border_map: int = 15): ...
def color_box_raw(colors, border: str = '#000000ff', border2: Incomplete | None = None, height: int = 32, width: int = 32, border_size: int = 1, check_size: int = 4, max_colors: int = 5, alpha: bool = False, border_map: int = 15): ...
def tint(img, color, opacity: int = 255, height: Incomplete | None = None, width: Incomplete | None = None): ...
def tint_raw(img, color, opacity: int = 255): ...
def get_language_from_view(view): ...
def syntax_highlight(view, src, language: Incomplete | None = None, inline: bool = False, allow_code_wrap: bool = False, language_map: Incomplete | None = None): ...
def tabs2spaces(text, tab_size: int = 4): ...
def scope2style(view, scope, selected: bool = False, explicit_background: bool = False): ...
def clear_cache() -> None: ...
def hide_popup(view) -> None: ...
def update_popup(view, content, md: bool = True, css: Incomplete | None = None, wrapper_class: Incomplete | None = None, template_vars: Incomplete | None = None, template_env_options: Incomplete | None = None, **kwargs) -> None: ...
def show_popup(view, content, md: bool = True, css: Incomplete | None = None, flags: int = 0, location: int = -1, max_width: int = 320, max_height: int = 240, on_navigate: Incomplete | None = None, on_hide: Incomplete | None = None, wrapper_class: Incomplete | None = None, template_vars: Incomplete | None = None, template_env_options: Incomplete | None = None, **kwargs) -> None: ...
def is_popup_visible(view): ...
def add_phantom(view, key, region, content, layout, md: bool = True, css: Incomplete | None = None, on_navigate: Incomplete | None = None, wrapper_class: Incomplete | None = None, template_vars: Incomplete | None = None, template_env_options: Incomplete | None = None, **kwargs): ...
def erase_phantoms(view, key) -> None: ...
def erase_phantom_by_id(view, pid) -> None: ...
def query_phantom(view, pid): ...
def query_phantoms(view, pids): ...
def new_html_sheet(window, name, contents, md: bool = True, css: Incomplete | None = None, flags: int = 0, group: int = -1, wrapper_class: Incomplete | None = None, template_vars: Incomplete | None = None, template_env_options: Incomplete | None = None, **kwargs): ...
def update_html_sheet(sheet, contents, md: bool = True, css: Incomplete | None = None, wrapper_class: Incomplete | None = None, template_vars: Incomplete | None = None, template_env_options: Incomplete | None = None, **kwargs) -> None: ...

class Phantom(sublime.Phantom):
    md: Incomplete
    css: Incomplete
    wrapper_class: Incomplete
    template_vars: Incomplete
    template_env_options: Incomplete
    def __init__(self, region, content, layout, md: bool = True, css: Incomplete | None = None, on_navigate: Incomplete | None = None, wrapper_class: Incomplete | None = None, template_vars: Incomplete | None = None, template_env_options: Incomplete | None = None, **kwargs) -> None: ...
    def __eq__(self, rhs): ...

class PhantomSet(sublime.PhantomSet):
    def __init__(self, view, key: str = '') -> None: ...
    def __del__(self) -> None: ...
    phantoms: Incomplete
    def update(self, new_phantoms) -> None: ...

def format_frontmatter(values): ...

RE_TAG_HTML: Incomplete
RE_TAG_LINK_ATTR: Incomplete

class _ImageResolver:
    minihtml: Incomplete
    done_callback: Incomplete
    images_to_resolve: Incomplete
    resolved: Incomplete
    def __init__(self, minihtml, resolver, done_callback, images_to_resolve) -> None: ...
    def on_image_resolved(self, url, data, mime, exception) -> None: ...
    def finalize(self): ...

def blocking_resolver(url, done) -> None: ...
def ui_thread_resolver(url, done): ...
def worker_thread_resolver(url, done): ...
def resolve_images(minihtml, resolver, on_done): ...
