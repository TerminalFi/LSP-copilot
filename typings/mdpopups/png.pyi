import unittest
from _typeshed import Incomplete
from array import array
from collections.abc import Generator

__all__ = ['Image', 'Reader', 'Writer', 'write_chunks', 'from_array']

strtobytes = str
bytestostr = str

class Error(Exception):
    prefix: str

class FormatError(Error):
    prefix: str

class ChunkError(FormatError):
    prefix: str

class Writer:
    rescale: Incomplete
    width: Incomplete
    height: Incomplete
    transparent: Incomplete
    background: Incomplete
    gamma: Incomplete
    greyscale: Incomplete
    alpha: Incomplete
    colormap: Incomplete
    bitdepth: Incomplete
    compression: Incomplete
    chunk_limit: Incomplete
    interlace: Incomplete
    palette: Incomplete
    color_type: Incomplete
    color_planes: Incomplete
    planes: Incomplete
    psize: Incomplete
    def __init__(self, width: Incomplete | None = None, height: Incomplete | None = None, size: Incomplete | None = None, greyscale: bool = False, alpha: bool = False, bitdepth: int = 8, palette: Incomplete | None = None, transparent: Incomplete | None = None, background: Incomplete | None = None, gamma: Incomplete | None = None, compression: Incomplete | None = None, interlace: bool = False, bytes_per_sample: Incomplete | None = None, planes: Incomplete | None = None, colormap: Incomplete | None = None, maxval: Incomplete | None = None, chunk_limit=...) -> None: ...
    def make_palette(self): ...
    def write(self, outfile, rows): ...
    def write_passes(self, outfile, rows, packed: bool = False): ...
    def write_array(self, outfile, pixels) -> None: ...
    def write_packed(self, outfile, rows): ...
    def convert_pnm(self, infile, outfile) -> None: ...
    def convert_ppm_and_pgm(self, ppmfile, pgmfile, outfile) -> None: ...
    def file_scanlines(self, infile) -> Generator[Incomplete, None, Incomplete]: ...
    def array_scanlines(self, pixels) -> Generator[Incomplete]: ...
    def array_scanlines_interlace(self, pixels) -> Generator[Incomplete]: ...

def write_chunks(out, chunks) -> None: ...
def from_array(a, mode: Incomplete | None = None, info={}): ...
fromarray = from_array

class Image:
    rows: Incomplete
    info: Incomplete
    def __init__(self, rows, info) -> None: ...
    def save(self, file) -> None: ...

class _readable:
    buf: Incomplete
    offset: int
    def __init__(self, buf) -> None: ...
    def read(self, n): ...

class Reader:
    signature: Incomplete
    transparent: Incomplete
    atchunk: Incomplete
    file: Incomplete
    def __init__(self, _guess: Incomplete | None = None, **kw) -> None: ...
    def chunk(self, seek: Incomplete | None = None): ...
    def chunks(self) -> Generator[Incomplete]: ...
    def undo_filter(self, filter_type, scanline, previous): ...
    def deinterlace(self, raw): ...
    def iterboxed(self, rows): ...
    def serialtoflat(self, bytes, width: Incomplete | None = None): ...
    def iterstraight(self, raw) -> Generator[Incomplete]: ...
    def validate_signature(self) -> None: ...
    def preamble(self) -> None: ...
    def chunklentype(self): ...
    colormap: Incomplete
    greyscale: Incomplete
    alpha: Incomplete
    color_planes: Incomplete
    planes: Incomplete
    psize: Incomplete
    row_bytes: Incomplete
    plte: Incomplete
    trns: Incomplete
    sbit: Incomplete
    background: Incomplete
    gamma: Incomplete
    def process_chunk(self) -> None: ...
    def read(self): ...
    def read_flat(self): ...
    def palette(self, alpha: str = 'natural'): ...
    def asDirect(self): ...
    def asFloat(self, maxval: float = 1.0): ...
    def asRGB8(self): ...
    def asRGBA8(self): ...
    def asRGB(self): ...
    def asRGBA(self): ...

class _array_shim(array):
    true_array = array
    def __new__(cls, typecode, init: Incomplete | None = None): ...
    def extend(self, extension): ...

class _dummy_itertools: ...

class Test(unittest.TestCase):
    class failureException(Exception): ...
    def helperLN(self, n) -> None: ...
    def testL8(self): ...
    def testL4(self): ...
    def testL2(self) -> None: ...
    def testP2(self) -> None: ...
    def testPtrns(self) -> None: ...
    def testRGBtoRGBA(self) -> None: ...
    def testLtoRGBA(self) -> None: ...
    def testCtrns(self) -> None: ...
    def testAdam7read(self) -> None: ...
    def testAdam7write(self) -> None: ...
    def testPGMin(self): ...
    def testPAMin(self): ...
    def testLA4(self) -> None: ...
    def testPNMsbit(self): ...
    def testLtrns0(self): ...
    def testLtrns1(self): ...
    def helperLtrns(self, transparent) -> None: ...
    def testWinfo(self) -> None: ...
    def testPackedIter(self) -> None: ...
    def testInterlacedArray(self) -> None: ...
    def testTrnsArray(self) -> None: ...
    def testEmpty(self) -> None: ...
    def testSigOnly(self) -> None: ...
    def testExtraPixels(self): ...
    def testNotEnoughPixels(self): ...
    def helperFormat(self, f): ...
    def testBadFilter(self): ...
    def testFlat(self) -> None: ...
    def testfromarray(self) -> None: ...
    def testfromarrayL16(self) -> None: ...
    def testfromarrayRGB(self) -> None: ...
    def testfromarrayIter(self): ...
    def testNumpyuint16(self) -> None: ...
    def testNumpyuint8(self) -> None: ...
    def testNumpybool(self) -> None: ...
    def testNumpyarray(self) -> None: ...
