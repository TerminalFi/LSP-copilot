from ..markdown.blockprocessors import CodeBlockProcessor as CodeBlockProcessor
from ..markdown.extensions import Extension as Extension
from ..markdown.extensions.attr_list import get_attrs as get_attrs
from ..markdown.preprocessors import Preprocessor as Preprocessor
from .util import PymdownxDeprecationWarning as PymdownxDeprecationWarning
from _typeshed import Incomplete

SOH: str
EOT: str
PREFIX_CHARS: Incomplete
RE_NESTED_FENCE_START: Incomplete
RE_HL_LINES: Incomplete
RE_LINENUMS: Incomplete
RE_OPTIONS: Incomplete
NESTED_FENCE_END: str
FENCED_BLOCK_RE: Incomplete

class CodeStash:
    stash: Incomplete
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def get(self, key, default: Incomplete | None = None): ...
    def remove(self, key) -> None: ...
    def store(self, key, code, indent_level) -> None: ...
    def clear_stash(self) -> None: ...

def fence_code_format(source, language, class_name, options, md, **kwargs): ...
def fence_div_format(source, language, class_name, options, md, **kwargs): ...
def highlight_validator(language, inputs, options, attrs, md): ...
def default_validator(language, inputs, options, attrs, md): ...

class SuperFencesCodeExtension(Extension):
    superfences: Incomplete
    config: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def extend_super_fences(self, name, formatter, validator) -> None: ...
    md: Incomplete
    stash: Incomplete
    def extendMarkdown(self, md) -> None: ...
    def patch_fenced_rule(self) -> None: ...
    def reset(self) -> None: ...

class SuperFencesBlockPreprocessor(Preprocessor):
    CODE_WRAP: str
    tab_len: Incomplete
    checked_hl_settings: bool
    codehilite_conf: Incomplete
    def __init__(self, md) -> None: ...
    def normalize_ws(self, text): ...
    def rebuild_block(self, lines): ...
    highlighter: Incomplete
    attr_list: Incomplete
    css_class: Incomplete
    extend_pygments_lang: Incomplete
    guess_lang: Incomplete
    pygments_style: Incomplete
    use_pygments: Incomplete
    noclasses: Incomplete
    linenums: Incomplete
    linenums_style: Incomplete
    linenums_class: Incomplete
    linenums_special: Incomplete
    wrapcode: Incomplete
    language_prefix: Incomplete
    code_attr_on_pre: Incomplete
    def get_hl_settings(self) -> None: ...
    ws: Incomplete
    ws_len: int
    ws_virtual_len: int
    fence: Incomplete
    lang: Incomplete
    quote_level: int
    code: Incomplete
    empty_lines: int
    fence_end: Incomplete
    options: Incomplete
    classes: Incomplete
    id: str
    attrs: Incomplete
    formatter: Incomplete
    def clear(self) -> None: ...
    def eval_fence(self, ws, content, start, end) -> None: ...
    def eval_quoted(self, ws, content, quote_level, start, end) -> None: ...
    last: Incomplete
    line_count: Incomplete
    def process_nested_block(self, ws, content, start, end) -> None: ...
    def normalize_hl_line(self, number): ...
    def parse_hl_lines(self, hl_lines): ...
    def parse_line_start(self, linestart): ...
    def parse_line_step(self, linestep): ...
    def parse_line_special(self, linespecial): ...
    def parse_fence_line(self, line): ...
    def parse_whitespace(self, line): ...
    def parse_options(self, m): ...
    def handle_attrs(self, m): ...
    first: Incomplete
    def search_nested(self, lines): ...
    def reassemble(self, lines): ...
    def highlight(self, src: str = '', language: str = '', options: Incomplete | None = None, md: Incomplete | None = None, **kwargs): ...
    def reindent(self, text, pos, level): ...
    def restore_raw_text(self, lines): ...
    stack: Incomplete
    disabled_indented: Incomplete
    preserve_tabs: Incomplete
    def run(self, lines): ...

class SuperFencesRawBlockPreprocessor(SuperFencesBlockPreprocessor):
    last: Incomplete
    def process_nested_block(self, ws, content, start, end) -> None: ...
    def reassemble(self, lines): ...
    stack: Incomplete
    disabled_indented: Incomplete
    def run(self, lines): ...

class SuperFencesCodeBlockProcessor(CodeBlockProcessor):
    def test(self, parent, block): ...
    def reindent(self, text, pos, level): ...
    def revert_greedy_fences(self, block): ...
    def run(self, parent, blocks): ...

def makeExtension(*args, **kwargs): ...
