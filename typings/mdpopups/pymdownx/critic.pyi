from ..markdown import Extension as Extension
from ..markdown.postprocessors import Postprocessor as Postprocessor
from ..markdown.preprocessors import Preprocessor as Preprocessor
from ..markdown.util import ETX as ETX, STX as STX
from _typeshed import Incomplete

SOH: str
EOT: str
CRITIC_KEY: str
CRITIC_PLACEHOLDER: Incomplete
SINGLE_CRITIC_PLACEHOLDER: Incomplete
CRITIC_PLACEHOLDERS: Incomplete
ALL_CRITICS: str
RE_CRITIC: Incomplete
RE_CRITIC_PLACEHOLDER: Incomplete
RE_CRITIC_SUB_PLACEHOLDER: Incomplete
RE_CRITIC_BLOCK: Incomplete
RE_BLOCK_SEP: Incomplete

class CriticStash:
    stash_key: Incomplete
    stash: Incomplete
    count: int
    def __init__(self, stash_key) -> None: ...
    def __len__(self) -> int: ...
    def get(self, key, default: Incomplete | None = None): ...
    def remove(self, key) -> None: ...
    def store(self, code): ...
    def clear(self) -> None: ...

class CriticsPostprocessor(Postprocessor):
    critic_stash: Incomplete
    def __init__(self, critic_stash) -> None: ...
    def subrestore(self, m): ...
    def block_edit(self, m): ...
    def restore(self, m): ...
    def run(self, text): ...

class CriticViewPreprocessor(Preprocessor):
    critic_stash: Incomplete
    def __init__(self, critic_stash) -> None: ...
    def critic_view(self, m): ...
    def critic_parse(self, m): ...
    def html_escape(self, txt, strip_nl: bool = False): ...
    def run(self, lines): ...

class CriticExtension(Extension):
    config: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    critic_stash: Incomplete
    def extendMarkdown(self, md) -> None: ...
    def reset(self) -> None: ...

def makeExtension(*args, **kwargs): ...
