from . import util as util
from ..markdown import Extension as Extension
from ..markdown.blockprocessors import BlockProcessor as BlockProcessor
from ..markdown.inlinepatterns import InlineProcessor as InlineProcessor
from _typeshed import Incomplete

RE_SMART_DOLLAR_INLINE: str
RE_DOLLAR_INLINE: str
RE_BRACKET_INLINE: str
RE_DOLLAR_BLOCK: str
RE_TEX_BLOCK: str
RE_BRACKET_BLOCK: str

def inline_mathjax_preview_format(math, language: str = 'math', class_name: str = 'arithmatex', md: Incomplete | None = None): ...
def inline_mathjax_format(math, language: str = 'math', class_name: str = 'arithmatex', md: Incomplete | None = None): ...
def inline_generic_format(math, language: str = 'math', class_name: str = 'arithmatex', md: Incomplete | None = None, wrap: str = '\\(%s\\)'): ...
def fence_mathjax_preview_format(math, language: str = 'math', class_name: str = 'arithmatex', options: Incomplete | None = None, md: Incomplete | None = None, **kwargs): ...
def fence_mathjax_format(math, language: str = 'math', class_name: str = 'arithmatex', options: Incomplete | None = None, md: Incomplete | None = None, **kwargs): ...
def fence_generic_format(math, language: str = 'math', class_name: str = 'arithmatex', options: Incomplete | None = None, md: Incomplete | None = None, wrap: str = '\\[\n%s\n\\]', **kwargs): ...

class InlineArithmatexPattern(InlineProcessor):
    ESCAPED_BSLASH: Incomplete
    generic: Incomplete
    wrap: Incomplete
    preview: Incomplete
    def __init__(self, pattern, config) -> None: ...
    def handleMatch(self, m, data): ...

class BlockArithmatexProcessor(BlockProcessor):
    generic: Incomplete
    wrap: Incomplete
    preview: Incomplete
    match: Incomplete
    pattern: Incomplete
    def __init__(self, pattern, config, md) -> None: ...
    def test(self, parent, block): ...
    def mathjax_output(self, parent, math) -> None: ...
    def generic_output(self, parent, math) -> None: ...
    def run(self, parent, blocks): ...

class ArithmatexExtension(Extension):
    config: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def extendMarkdown(self, md) -> None: ...

def makeExtension(*args, **kwargs): ...
