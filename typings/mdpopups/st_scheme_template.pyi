from . import jinja2 as jinja2
from .coloraide.css.parse import norm_angle_channel as norm_angle_channel
from .pygments.formatters import HtmlFormatter as HtmlFormatter
from .st_clean_css import clean_css as clean_css
from .st_colormod import Color as Color
from _typeshed import Incomplete

LOCATION: Incomplete
DEFAULT_CSS_PATH: Incomplete
INVALID: int
POPUP: int
PHANTOM: int
SHEET: int
LUM_MIDPOINT: int
re_float_trim: Incomplete
re_valid_custom_scopes: Incomplete
re_missing_semi_colon: Incomplete
re_base_colors: Incomplete
re_color: Incomplete
re_bgcolor: Incomplete
re_pygments_selectors: Incomplete
CODE_BLOCKS: str
OLD_DEFAULT_CSS: str
DEFAULT_CSS: str
re_css_filter: Incomplete

def parse_css_filter(string): ...

class _Filters:
    @staticmethod
    def colorize(color, deg) -> None: ...
    @staticmethod
    def hue(color, deg) -> None: ...
    @staticmethod
    def contrast(color, factor) -> None: ...
    @staticmethod
    def invert(color) -> None: ...
    @staticmethod
    def saturation(color, factor) -> None: ...
    @staticmethod
    def grayscale(color) -> None: ...
    @staticmethod
    def sepia(color) -> None: ...
    @classmethod
    def brightness(cls, color, factor) -> None: ...

class SchemeTemplate:
    scheme_file: Incomplete
    css_type: Incomplete
    variable: Incomplete
    view: Incomplete
    def __init__(self, scheme_file) -> None: ...
    def guess_style(self, view, scope, selected: bool = False, explicit_background: bool = False): ...
    def get_variables(self): ...
    def get_html_border(self): ...
    def is_dark(self): ...
    def get_lums(self): ...
    def get_fg(self): ...
    def get_bg(self): ...
    use_pygments: Incomplete
    default_style: Incomplete
    env: Incomplete
    def setup(self) -> None: ...
    def read_css(self, css): ...
    def filters(self, css, string, space: str = 'srgb'): ...
    def fade(self, css, factor): ...
    def colorize(self, css, degree): ...
    def hue(self, css, degree): ...
    def invert(self, css): ...
    def contrast(self, css, factor): ...
    def saturation(self, css, factor): ...
    def grayscale(self, css): ...
    def sepia(self, css): ...
    def brightness(self, css, factor): ...
    def to_fg(self, css): ...
    def to_bg(self, css): ...
    def pygments(self, style): ...
    def retrieve_selector(self, selector, key: Incomplete | None = None, explicit_background: bool = True): ...
    variables: Incomplete
    plugin_vars: Incomplete
    def apply_template(self, view, css, css_type, template_vars: Incomplete | None = None): ...

def get_pygments(style): ...
