from . import Extension as Extension
from .. import util as util
from ..inlinepatterns import InlineProcessor as InlineProcessor
from ..postprocessors import Postprocessor as Postprocessor
from ..preprocessors import Preprocessor as Preprocessor
from ..treeprocessors import Treeprocessor as Treeprocessor
from _typeshed import Incomplete

FN_BACKLINK_TEXT: Incomplete
NBSP_PLACEHOLDER: Incomplete
DEF_RE: Incomplete
TABBED_RE: Incomplete
RE_REF_ID: Incomplete

class FootnoteExtension(Extension):
    config: Incomplete
    unique_prefix: int
    found_refs: Incomplete
    used_refs: Incomplete
    def __init__(self, **kwargs) -> None: ...
    parser: Incomplete
    md: Incomplete
    def extendMarkdown(self, md) -> None: ...
    footnotes: Incomplete
    def reset(self) -> None: ...
    def unique_ref(self, reference, found: bool = False): ...
    def findFootnotesPlaceholder(self, root): ...
    def setFootnote(self, id, text) -> None: ...
    def get_separator(self): ...
    def makeFootnoteId(self, id): ...
    def makeFootnoteRefId(self, id, found: bool = False): ...
    def makeFootnotesDiv(self, root): ...

class FootnotePreprocessor(Preprocessor):
    footnotes: Incomplete
    def __init__(self, footnotes) -> None: ...
    def run(self, lines): ...
    def detectTabbed(self, lines): ...

class FootnoteInlineProcessor(InlineProcessor):
    footnotes: Incomplete
    def __init__(self, pattern, footnotes) -> None: ...
    def handleMatch(self, m, data): ...

class FootnotePostTreeprocessor(Treeprocessor):
    footnotes: Incomplete
    def __init__(self, footnotes) -> None: ...
    def add_duplicates(self, li, duplicates) -> None: ...
    def get_num_duplicates(self, li): ...
    def handle_duplicates(self, parent) -> None: ...
    offset: int
    def run(self, root) -> None: ...

class FootnoteTreeprocessor(Treeprocessor):
    footnotes: Incomplete
    def __init__(self, footnotes) -> None: ...
    def run(self, root) -> None: ...

class FootnotePostprocessor(Postprocessor):
    footnotes: Incomplete
    def __init__(self, footnotes) -> None: ...
    def run(self, text): ...

def makeExtension(**kwargs): ...
