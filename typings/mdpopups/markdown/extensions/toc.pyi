from . import Extension as Extension
from ..postprocessors import UnescapePostprocessor as UnescapePostprocessor
from ..treeprocessors import Treeprocessor as Treeprocessor
from ..util import AMP_SUBSTITUTE as AMP_SUBSTITUTE, AtomicString as AtomicString, HTML_PLACEHOLDER_RE as HTML_PLACEHOLDER_RE, code_escape as code_escape, parseBoolValue as parseBoolValue
from _typeshed import Incomplete
from collections.abc import Generator

html_parser: Incomplete

def slugify(value, separator): ...

IDCOUNT_RE: Incomplete

def unique(id, ids): ...
def get_name(el): ...
def stashedHTML2text(text, md, strip_entities: bool = True): ...
def unescape(text): ...
def nest_toc_tokens(toc_list): ...

class TocTreeprocessor(Treeprocessor):
    marker: Incomplete
    title: Incomplete
    base_level: Incomplete
    slugify: Incomplete
    sep: Incomplete
    use_anchors: Incomplete
    anchorlink_class: Incomplete
    use_permalinks: Incomplete
    permalink_class: Incomplete
    permalink_title: Incomplete
    header_rgx: Incomplete
    toc_top: int
    toc_bottom: Incomplete
    def __init__(self, md, config) -> None: ...
    def iterparent(self, node) -> Generator[Incomplete, Incomplete]: ...
    def replace_marker(self, root, elem) -> None: ...
    def set_level(self, elem) -> None: ...
    def add_anchor(self, c, elem_id) -> None: ...
    def add_permalink(self, c, elem_id) -> None: ...
    def build_toc_div(self, toc_list): ...
    def run(self, doc) -> None: ...

class TocExtension(Extension):
    TreeProcessorClass = TocTreeprocessor
    config: Incomplete
    def __init__(self, **kwargs) -> None: ...
    md: Incomplete
    def extendMarkdown(self, md) -> None: ...
    def reset(self) -> None: ...

def makeExtension(**kwargs): ...
