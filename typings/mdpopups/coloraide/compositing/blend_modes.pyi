import abc
from ..types import Vector as Vector
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod

def lum(rgb: Vector) -> float: ...
def clip_color(rgb: Vector) -> Vector: ...
def set_lum(rgb: Vector, l: float) -> Vector: ...
def sat(rgb: Vector) -> float: ...
def set_sat(rgb: Vector, s: float) -> Vector: ...

class Blend(metaclass=ABCMeta):
    @abstractmethod
    def blend(self, coords1: Vector, coords2: Vector) -> Vector: ...

class SeperableBlend(Blend, metaclass=abc.ABCMeta):
    @abstractmethod
    def apply(self, cb: float, cs: float) -> float: ...
    def blend(self, coords1: Vector, coords2: Vector) -> Vector: ...

class NonSeperableBlend(Blend, metaclass=abc.ABCMeta):
    @abstractmethod
    def apply(self, cb: Vector, cs: Vector) -> Vector: ...
    def blend(self, coords_backgrond: Vector, coords_source: Vector) -> Vector: ...

class BlendNormal(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendMultiply(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendScreen(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendDarken(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendLighten(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendColorDodge(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendColorBurn(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendOverlay(SeperableBlend):
    screen: Incomplete
    multiply: Incomplete
    def __init__(self) -> None: ...
    def apply(self, cb: float, cs: float) -> float: ...

class BlendDifference(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendExclusion(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendHardLight(SeperableBlend):
    screen: Incomplete
    multiply: Incomplete
    def __init__(self) -> None: ...
    def apply(self, cb: float, cs: float) -> float: ...

class BlendSoftLight(SeperableBlend):
    def apply(self, cb: float, cs: float) -> float: ...

class BlendHue(NonSeperableBlend):
    def apply(self, cb: Vector, cs: Vector) -> Vector: ...

class BlendSaturation(NonSeperableBlend):
    def apply(self, cb: Vector, cs: Vector) -> Vector: ...

class BlendLuminosity(NonSeperableBlend):
    def apply(self, cb: Vector, cs: Vector) -> Vector: ...

class BlendColor(NonSeperableBlend):
    def apply(self, cb: Vector, cs: Vector) -> Vector: ...

SUPPORTED: dict[str, Blend]

def get_blender(blend: str) -> Blend: ...
