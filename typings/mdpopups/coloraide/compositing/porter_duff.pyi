from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod

class PorterDuff(metaclass=ABCMeta):
    cba: Incomplete
    csa: Incomplete
    def __init__(self, cba: float, csa: float) -> None: ...
    @abstractmethod
    def fa(self) -> float: ...
    @abstractmethod
    def fb(self) -> float: ...
    def co(self, cb: float, cs: float) -> float: ...
    def ao(self) -> float: ...

class Clear(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class Copy(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class Destination(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class SourceOver(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class DestinationOver(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class SourceIn(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class DestinationeIn(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class SourceOut(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class DestinationOut(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class SourceAtop(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class DestinationAtop(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class XOR(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

class Lighter(PorterDuff):
    def fa(self) -> float: ...
    def fb(self) -> float: ...

SUPPORTED: Incomplete

def compositor(name: str) -> type[PorterDuff]: ...
