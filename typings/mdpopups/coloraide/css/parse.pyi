from . import color_names as color_names
from ..channels import Channel as Channel, FLG_ANGLE as FLG_ANGLE
from ..spaces import Space as Space
from ..types import Vector as Vector
from _typeshed import Incomplete

RGB_CHANNEL_SCALE: Incomplete
HUE_SCALE: Incomplete
SCALE_PERCENT: Incomplete
CONVERT_TURN: int
CONVERT_GRAD: Incomplete
RE_CHAN_SPLIT: Incomplete
RE_COMMA_SPlIT: Incomplete
RE_SLASH_SPLIT: Incomplete
COLOR_PARTS: Incomplete
RE_COLOR_MATCH: Incomplete
CSS_MATCH: Incomplete

def norm_float(string: str) -> float: ...
def norm_hex_channel(string: str) -> float: ...
def norm_percent_channel(string: str, scale: float = 100, offset: float = 0.0) -> float: ...
def norm_color_channel(string: str, scale: float = 1, offset: float = 0.0) -> float: ...
def norm_rgb_channel(string: str, scale: float = 1) -> float: ...
def norm_alpha_channel(string: str) -> float: ...
def norm_angle_channel(angle: str) -> float: ...
def parse_hex(color: str) -> tuple[Vector, float]: ...
def parse_rgb_channels(color: str, boundry: tuple[Channel, ...]) -> tuple[Vector, float]: ...
def parse_channels(color: str, boundry: tuple[Channel, ...]) -> tuple[Vector, float]: ...
def parse_color(string: str, spaces: dict[str, 'Space'], start: int, fullmatch: bool = False) -> tuple['Space', tuple[Vector, float], int] | None: ...
def parse_css(cspace: Space, string: str, start: int = 0, fullmatch: bool = True, color: bool = False) -> tuple[tuple[Vector, float], int] | None: ...
