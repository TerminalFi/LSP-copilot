from . import parse as parse
from .. import util as util
from ..channels import FLG_OPT_PERCENT as FLG_OPT_PERCENT, FLG_PERCENT as FLG_PERCENT
from ..color import Color as Color
from ..types import Vector as Vector
from .color_names import to_name as to_name
from _typeshed import Incomplete

RE_COMPRESS: Incomplete
COMMA: str
SLASH: str
SPACE: str
EMPTY: str

def named_color(obj: Color, alpha: bool | None, fit: str | bool) -> str | None: ...
def named_color_function(obj: Color, func: str, alpha: bool | None, precision: int, fit: str | bool, none: bool, percent: bool, legacy: bool, scale: float) -> str: ...
def color_function(obj: Color, alpha: bool | None, precision: int, fit: str | bool, none: bool) -> str: ...
def get_coords(obj: Color, fit: str | bool, none: bool, legacy: bool) -> Vector: ...
def get_alpha(obj: Color, alpha: bool | None, none: bool) -> float | None: ...
def hexadecimal(obj: Color, alpha: bool | None = None, fit: str | bool = True, upper: bool = False, compress: bool = False) -> str: ...
def serialize_css(obj: Color, func: str = '', color: bool = False, alpha: bool | None = None, precision: int | None = None, fit: str | bool = True, none: bool = False, percent: bool = False, hexa: bool = False, upper: bool = False, compress: bool = False, name: bool = False, legacy: bool = False, scale: float = 1.0) -> str: ...
