from .. import util as util
from ..cat import WHITES as WHITES
from ..channels import Channel as Channel, FLG_ANGLE as FLG_ANGLE
from ..spaces import Cylindrical as Cylindrical, Space as Space
from ..types import Vector as Vector
from .lab import EPSILON as EPSILON, KAPPA as KAPPA
from .lch import ACHROMATIC_THRESHOLD as ACHROMATIC_THRESHOLD
from .srgb_linear import XYZ_TO_RGB as XYZ_TO_RGB
from _typeshed import Incomplete

def distance_line_from_origin(line: tuple[float, float]) -> float: ...
def get_bounds(l: float) -> list[tuple[float, float]]: ...
def max_safe_chroma_for_l(l: float) -> float: ...
def hpluv_to_lch(hpluv: Vector) -> Vector: ...
def lch_to_hpluv(lch: Vector) -> Vector: ...

class HPLuv(Cylindrical, Space):
    BASE: str
    NAME: str
    SERIALIZE: Incomplete
    CHANNELS: Incomplete
    CHANNEL_ALIASES: Incomplete
    WHITE: Incomplete
    def normalize(self, coords: Vector) -> Vector: ...
    def to_base(self, coords: Vector) -> Vector: ...
    def from_base(self, coords: Vector) -> Vector: ...
