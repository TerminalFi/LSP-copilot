from _typeshed import Incomplete
from enum import IntEnum, IntFlag
from typing import Any, Callable, Iterable, Iterator, Literal, Reversible, Sequence

class HoverZone(IntEnum):
    TEXT = 1
    GUTTER = 2
    MARGIN = 3

HOVER_TEXT: Incomplete
HOVER_GUTTER: Incomplete
HOVER_MARGIN: Incomplete

class NewFileFlags(IntFlag):
    NONE = 0
    ENCODED_POSITION = 1
    TRANSIENT = 4
    FORCE_GROUP = 8
    SEMI_TRANSIENT = 16
    ADD_TO_SELECTION = 32
    REPLACE_MRU = 64
    CLEAR_TO_RIGHT = 128
    FORCE_CLONE = 256

ENCODED_POSITION: Incomplete
TRANSIENT: Incomplete
FORCE_GROUP: Incomplete
SEMI_TRANSIENT: Incomplete
ADD_TO_SELECTION: Incomplete
REPLACE_MRU: Incomplete
CLEAR_TO_RIGHT: Incomplete
FORCE_CLONE: Incomplete

class FindFlags(IntFlag):
    NONE = 0
    LITERAL = 1
    IGNORECASE = 2
    WHOLEWORD = 4
    REVERSE = 8
    WRAP = 16

LITERAL: Incomplete
IGNORECASE: Incomplete
WHOLEWORD: Incomplete
REVERSE: Incomplete
WRAP: Incomplete

class QuickPanelFlags(IntFlag):
    NONE = 0
    MONOSPACE_FONT = 1
    KEEP_OPEN_ON_FOCUS_LOST = 2
    WANT_EVENT = 4

MONOSPACE_FONT: Incomplete
KEEP_OPEN_ON_FOCUS_LOST: Incomplete
WANT_EVENT: Incomplete

class PopupFlags(IntFlag):
    NONE = 0
    COOPERATE_WITH_AUTO_COMPLETE = 2
    HIDE_ON_MOUSE_MOVE = 4
    HIDE_ON_MOUSE_MOVE_AWAY = 8
    KEEP_ON_SELECTION_MODIFIED = 16
    HIDE_ON_CHARACTER_EVENT = 32

COOPERATE_WITH_AUTO_COMPLETE: Incomplete
HIDE_ON_MOUSE_MOVE: Incomplete
HIDE_ON_MOUSE_MOVE_AWAY: Incomplete
KEEP_ON_SELECTION_MODIFIED: Incomplete
HIDE_ON_CHARACTER_EVENT: Incomplete

class RegionFlags(IntFlag):
    NONE = 0
    DRAW_EMPTY = 1
    HIDE_ON_MINIMAP = 2
    DRAW_EMPTY_AS_OVERWRITE = 4
    PERSISTENT = 16
    DRAW_NO_FILL = 32
    HIDDEN = 128
    DRAW_NO_OUTLINE = 256
    DRAW_SOLID_UNDERLINE = 512
    DRAW_STIPPLED_UNDERLINE = 1024
    DRAW_SQUIGGLY_UNDERLINE = 2048
    NO_UNDO = 8192

DRAW_EMPTY: Incomplete
HIDE_ON_MINIMAP: Incomplete
DRAW_EMPTY_AS_OVERWRITE: Incomplete
PERSISTENT: Incomplete
DRAW_NO_FILL: Incomplete
HIDDEN: Incomplete
DRAW_NO_OUTLINE: Incomplete
DRAW_SOLID_UNDERLINE: Incomplete
DRAW_STIPPLED_UNDERLINE: Incomplete
DRAW_SQUIGGLY_UNDERLINE: Incomplete
NO_UNDO: Incomplete

class QueryOperator(IntEnum):
    EQUAL = 0
    NOT_EQUAL = 1
    REGEX_MATCH = 2
    NOT_REGEX_MATCH = 3
    REGEX_CONTAINS = 4
    NOT_REGEX_CONTAINS = 5

OP_EQUAL: Incomplete
OP_NOT_EQUAL: Incomplete
OP_REGEX_MATCH: Incomplete
OP_NOT_REGEX_MATCH: Incomplete
OP_REGEX_CONTAINS: Incomplete
OP_NOT_REGEX_CONTAINS: Incomplete

class PointClassification(IntFlag):
    NONE = 0
    WORD_START = 1
    WORD_END = 2
    PUNCTUATION_START = 4
    PUNCTUATION_END = 8
    SUB_WORD_START = 16
    SUB_WORD_END = 32
    LINE_START = 64
    LINE_END = 128
    EMPTY_LINE = 256

CLASS_WORD_START: Incomplete
CLASS_WORD_END: Incomplete
CLASS_PUNCTUATION_START: Incomplete
CLASS_PUNCTUATION_END: Incomplete
CLASS_SUB_WORD_START: Incomplete
CLASS_SUB_WORD_END: Incomplete
CLASS_LINE_START: Incomplete
CLASS_LINE_END: Incomplete
CLASS_EMPTY_LINE: Incomplete

class AutoCompleteFlags(IntFlag):
    NONE = 0
    INHIBIT_WORD_COMPLETIONS = 8
    INHIBIT_EXPLICIT_COMPLETIONS = 16
    DYNAMIC_COMPLETIONS = 32
    INHIBIT_REORDER = 128

INHIBIT_WORD_COMPLETIONS: Incomplete
INHIBIT_EXPLICIT_COMPLETIONS: Incomplete
DYNAMIC_COMPLETIONS: Incomplete
INHIBIT_REORDER: Incomplete

class CompletionItemFlags(IntFlag):
    NONE = 0
    KEEP_PREFIX = 1

COMPLETION_FLAG_KEEP_PREFIX: Incomplete

class DialogResult(IntEnum):
    CANCEL = 0
    YES = 1
    NO = 2

DIALOG_CANCEL: Incomplete
DIALOG_YES: Incomplete
DIALOG_NO: Incomplete

class PhantomLayout(IntEnum):
    INLINE = 0
    BELOW = 1
    BLOCK = 2

LAYOUT_INLINE: Incomplete
LAYOUT_BELOW: Incomplete
LAYOUT_BLOCK: Incomplete

class KindId(IntEnum):
    AMBIGUOUS = 0
    KEYWORD = 1
    TYPE = 2
    FUNCTION = 3
    NAMESPACE = 4
    NAVIGATION = 5
    MARKUP = 6
    VARIABLE = 7
    SNIPPET = 8
    COLOR_REDISH = 9
    COLOR_ORANGISH = 10
    COLOR_YELLOWISH = 11
    COLOR_GREENISH = 12
    COLOR_CYANISH = 13
    COLOR_BLUISH = 14
    COLOR_PURPLISH = 15
    COLOR_PINKISH = 16
    COLOR_DARK = 17
    COLOR_LIGHT = 18

KIND_ID_AMBIGUOUS: Incomplete
KIND_ID_KEYWORD: Incomplete
KIND_ID_TYPE: Incomplete
KIND_ID_FUNCTION: Incomplete
KIND_ID_NAMESPACE: Incomplete
KIND_ID_NAVIGATION: Incomplete
KIND_ID_MARKUP: Incomplete
KIND_ID_VARIABLE: Incomplete
KIND_ID_SNIPPET: Incomplete
KIND_ID_COLOR_REDISH: Incomplete
KIND_ID_COLOR_ORANGISH: Incomplete
KIND_ID_COLOR_YELLOWISH: Incomplete
KIND_ID_COLOR_GREENISH: Incomplete
KIND_ID_COLOR_CYANISH: Incomplete
KIND_ID_COLOR_BLUISH: Incomplete
KIND_ID_COLOR_PURPLISH: Incomplete
KIND_ID_COLOR_PINKISH: Incomplete
KIND_ID_COLOR_DARK: Incomplete
KIND_ID_COLOR_LIGHT: Incomplete
KIND_AMBIGUOUS: tuple[int, str, str]
KIND_KEYWORD: tuple[int, str, str]
KIND_TYPE: tuple[int, str, str]
KIND_FUNCTION: tuple[int, str, str]
KIND_NAMESPACE: tuple[int, str, str]
KIND_NAVIGATION: tuple[int, str, str]
KIND_MARKUP: tuple[int, str, str]
KIND_VARIABLE: tuple[int, str, str]
KIND_SNIPPET: tuple[int, str, str]

class SymbolSource(IntEnum):
    ANY = 0
    INDEX = 1
    OPEN_FILES = 2

SYMBOL_SOURCE_ANY: Incomplete
SYMBOL_SOURCE_INDEX: Incomplete
SYMBOL_SOURCE_OPEN_FILES: Incomplete

class SymbolType(IntEnum):
    ANY = 0
    DEFINITION = 1
    REFERENCE = 2

SYMBOL_TYPE_ANY: Incomplete
SYMBOL_TYPE_DEFINITION: Incomplete
SYMBOL_TYPE_REFERENCE: Incomplete

class CompletionFormat(IntEnum):
    TEXT = 0
    SNIPPET = 1
    COMMAND = 2

COMPLETION_FORMAT_TEXT: Incomplete
COMPLETION_FORMAT_SNIPPET: Incomplete
COMPLETION_FORMAT_COMMAND: Incomplete

def version() -> str: ...
def platform() -> Literal['osx', 'linux', 'windows']: ...
def arch() -> Literal['x32', 'x64', 'arm64']: ...
def channel() -> Literal['dev', 'stable']: ...
def executable_path() -> str: ...
def executable_hash() -> tuple[str, str, str]: ...
def packages_path() -> str: ...
def installed_packages_path() -> str: ...
def cache_path() -> str: ...
def status_message(msg: str) -> None: ...
def error_message(msg: str) -> None: ...
def message_dialog(msg: str) -> None: ...
def ok_cancel_dialog(msg: str, ok_title: str = ..., title: str = ...) -> bool: ...
def yes_no_cancel_dialog(msg: str, yes_title: str = ..., no_title: str = ..., title: str = ...) -> DialogResult: ...
def open_dialog(callback: Callable[[str | list[str] | None], None], file_types: list[tuple[str, list[str]]] = ..., directory: str | None = ..., multi_select: bool = ..., allow_folders: bool = ...) -> None: ...
def save_dialog(callback: Callable[[str | None], None], file_types: list[tuple[str, list[str]]] = ..., directory: str | None = ..., name: str | None = ..., extension: str | None = ...) -> None: ...
def select_folder_dialog(callback: Callable[[str | list[str] | None], None], directory: str | None = ..., multi_select: bool = ...) -> None: ...
def choose_font_dialog(callback: Callable[[dict[str, Any] | None], None], default: dict[str, Any] | None = ...) -> None: ...
def run_command(cmd: str, args: dict[str, Any] | None = ...) -> None: ...
def format_command(cmd: str, args: dict[str, Any] | None = ...) -> str: ...
def html_format_command(cmd: str, args: dict[str, Any] | None = ...) -> str: ...
def command_url(cmd: str, args: dict[str, Any] | None = ...) -> str: ...
def get_clipboard_async(callback: Callable[[str], None], size_limit: int = ...) -> None: ...
def get_clipboard(size_limit: int = ...) -> str: ...
def set_clipboard(text: str) -> None: ...
def log_commands(flag: bool | None = ...) -> None: ...
def get_log_commands() -> bool: ...
def log_input(flag: bool | None = ...) -> None: ...
def get_log_input() -> bool: ...
def log_fps(flag: bool | None = ...) -> None: ...
def get_log_fps() -> bool: ...
def log_result_regex(flag: bool | None = ...) -> None: ...
def get_log_result_regex() -> bool: ...
def log_indexing(flag: bool | None = ...) -> None: ...
def get_log_indexing() -> bool: ...
def log_build_systems(flag: bool | None = ...) -> None: ...
def get_log_build_systems() -> bool: ...
def log_control_tree(flag: bool | None = ...) -> None: ...
def get_log_control_tree() -> bool: ...
def ui_info() -> dict[str, Any]: ...
def score_selector(scope_name: str, selector: str) -> int: ...
def load_resource(name: str) -> str: ...
def load_binary_resource(name: str) -> bytes: ...
def find_resources(pattern: str) -> list[str]: ...
def encode_value(val: Any, pretty: bool = ..., update_text: str = ...) -> str: ...
def decode_value(data: str) -> Any: ...
def expand_variables(value: Any, variables: dict[str, str]) -> Any: ...
def load_settings(base_name: str) -> Settings: ...
def save_settings(base_name: str) -> None: ...
def set_timeout(callback: Callable[[], Any], delay: int = ...) -> None: ...
def set_timeout_async(callback: Callable[[], Any], delay: int = ...) -> None: ...
def active_window() -> Window: ...
def windows() -> list[Window]: ...
def get_macro() -> list[dict[str, Any]]: ...
def project_history() -> list[str]: ...
def folder_history() -> list[str]: ...

class Window:
    window_id: int
    settings_object: Settings | None
    template_settings_object: Settings | None
    def __init__(self, id: int) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __bool__(self) -> bool: ...
    def __repr__(self) -> str: ...
    def id(self) -> int: ...
    def is_valid(self) -> bool: ...
    def hwnd(self) -> int: ...
    def active_sheet(self) -> Sheet | None: ...
    def active_view(self) -> View | None: ...
    def new_html_sheet(self, name: str, contents: str, flags: NewFileFlags = ..., group: int = ...) -> Sheet: ...
    def run_command(self, cmd: str, args: dict[str, Any] | None = ...) -> None: ...
    def new_file(self, flags: NewFileFlags = ..., syntax: str = ...) -> View: ...
    def open_file(self, fname: str, flags: NewFileFlags = ..., group: int = ...) -> View: ...
    def find_open_file(self, fname: str, group: int = ...) -> View | None: ...
    def file_history(self) -> list[str]: ...
    def num_groups(self) -> int: ...
    def active_group(self) -> int: ...
    def focus_group(self, idx: int) -> None: ...
    def focus_sheet(self, sheet: Sheet) -> None: ...
    def focus_view(self, view: View) -> None: ...
    def select_sheets(self, sheets: list[Sheet]) -> None: ...
    def bring_to_front(self) -> None: ...
    def get_sheet_index(self, sheet: Sheet) -> tuple[int, int]: ...
    def get_view_index(self, view: View) -> tuple[int, int]: ...
    def set_sheet_index(self, sheet: Sheet, group: int, idx: int) -> None: ...
    def set_view_index(self, view: View, group: int, idx: int) -> None: ...
    def move_sheets_to_group(self, sheets: list[Sheet], group: int, insertion_idx: int = ..., select: bool = ...) -> None: ...
    def sheets(self) -> list[Sheet]: ...
    def views(self, *, include_transient: bool = ...) -> list[View]: ...
    def selected_sheets(self) -> list[Sheet]: ...
    def selected_sheets_in_group(self, group: int) -> list[Sheet]: ...
    def active_sheet_in_group(self, group: int) -> Sheet | None: ...
    def active_view_in_group(self, group: int) -> View | None: ...
    def sheets_in_group(self, group: int) -> list[Sheet]: ...
    def views_in_group(self, group: int) -> list[View]: ...
    def num_sheets_in_group(self, group: int) -> int: ...
    def num_views_in_group(self, group: int) -> int: ...
    def transient_sheet_in_group(self, group: int) -> Sheet | None: ...
    def transient_view_in_group(self, group: int) -> View | None: ...
    def promote_sheet(self, sheet: Sheet) -> None: ...
    def layout(self) -> dict[str, Any]: ...
    def get_layout(self) -> dict[str, Any]: ...
    def set_layout(self, layout: dict[str, Any]) -> None: ...
    def create_output_panel(self, name: str, unlisted: bool = ...) -> View: ...
    def find_output_panel(self, name: str) -> View | None: ...
    def destroy_output_panel(self, name: str) -> None: ...
    def active_panel(self) -> str | None: ...
    def panels(self) -> list[str]: ...
    def get_output_panel(self, name: str) -> View | None: ...
    def show_input_panel(self, caption: str, initial_text: str, on_done: Callable[[str], None] | None, on_change: Callable[[str], None] | None, on_cancel: Callable[[], None] | None) -> View: ...
    def show_quick_panel(self, items: list[Any], on_select: Callable[..., None], flags: QuickPanelFlags = ..., selected_index: int = ..., on_highlight: Callable[..., None] = ..., placeholder: str | None = ...) -> None: ...
    def is_sidebar_visible(self) -> bool: ...
    def set_sidebar_visible(self, flag: bool, animate: bool = ...) -> None: ...
    def is_minimap_visible(self) -> bool: ...
    def set_minimap_visible(self, flag: bool) -> None: ...
    def is_status_bar_visible(self) -> bool: ...
    def set_status_bar_visible(self, flag: bool) -> None: ...
    def get_tabs_visible(self) -> bool: ...
    def set_tabs_visible(self, flag: bool) -> None: ...
    def is_menu_visible(self) -> bool: ...
    def set_menu_visible(self, flag: bool) -> None: ...
    def folders(self) -> list[str]: ...
    def project_file_name(self) -> str | None: ...
    def workspace_file_name(self) -> str | None: ...
    def project_data(self) -> bool | str | int | float | list[Any] | dict[str, Any] | None: ...
    def set_project_data(self, v: bool | str | int | float | list[Any] | dict[str, Any] | None) -> None: ...
    def settings(self) -> Settings: ...
    def template_settings(self) -> Settings: ...
    def symbol_locations(self, sym: str, source: SymbolSource = ..., type: SymbolType = ..., kind_id: KindId = ..., kind_letter: str = ...) -> list[SymbolLocation]: ...
    def lookup_symbol_in_index(self, sym: str) -> list[SymbolLocation]: ...
    def lookup_symbol_in_open_files(self, sym: str) -> list[SymbolLocation]: ...
    def lookup_references_in_index(self, symbol: str) -> list[SymbolLocation]: ...
    def lookup_references_in_open_files(self, symbol: str) -> list[SymbolLocation]: ...
    def extract_variables(self) -> dict[str, str]: ...
    def status_message(self, msg: str) -> None: ...

class Edit:
    edit_token: int
    def __init__(self, token: int) -> None: ...
    def __repr__(self) -> str: ...

class Region:
    a: int
    b: int
    xpos: float
    def __init__(self, a: int, b: int | None = ..., xpos: float = ...) -> None: ...
    def __iter__(self) -> Iterable[int]: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __eq__(self, rhs: object) -> bool: ...
    def __lt__(self, rhs: object) -> bool: ...
    def __contains__(self, v: Region | int) -> bool: ...
    def to_tuple(self) -> tuple[int, int]: ...
    def empty(self) -> bool: ...
    def begin(self) -> int: ...
    def end(self) -> int: ...
    def size(self) -> int: ...
    def contains(self, x: Region | int) -> bool: ...
    def cover(self, rhs: Region) -> Region: ...
    def intersection(self, rhs: Region) -> Region: ...
    def intersects(self, rhs: Region) -> bool: ...

class HistoricPosition:
    pt: int
    row: int
    col: int
    col_utf16: int
    col_utf8: int
    def __init__(self, pt: int, row: int, col: int, col_utf16: int, col_utf8: int) -> None: ...
    def __repr__(self) -> str: ...

class TextChange:
    a: HistoricPosition
    b: HistoricPosition
    len_utf16: int
    len_utf8: int
    str: str
    def __init__(self, pa: HistoricPosition, pb: HistoricPosition, len_utf16: int, len_utf8: int, s: str) -> None: ...
    def __repr__(self) -> str: ...

class Selection(Reversible):
    view_id: int
    def __init__(self, id: int) -> None: ...
    def __reversed__(self) -> Iterator[Region]: ...
    def __iter__(self) -> Iterator[Region]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> Region: ...
    def __delitem__(self, index: int) -> None: ...
    def __eq__(self, rhs: Selection | None) -> bool: ...
    def __lt__(self, rhs: Selection | None) -> bool: ...
    def __bool__(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def is_valid(self) -> bool: ...
    def clear(self) -> None: ...
    def add(self, x: Region | int) -> None: ...
    def add_all(self, regions: Iterable[Region | int]) -> None: ...
    def subtract(self, region: Region) -> None: ...
    def contains(self, region: Region) -> bool: ...

class Sheet:
    sheet_id: int
    def __init__(self, id: int) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def id(self) -> int: ...
    def window(self) -> Window | None: ...
    def view(self) -> View | None: ...
    def file_name(self) -> str | None: ...
    def is_semi_transient(self) -> bool: ...
    def is_transient(self) -> bool: ...
    def is_selected(self) -> bool: ...
    def group(self) -> int | None: ...
    def close(self, on_close: Callable[[bool], None] = ...) -> None: ...

class TextSheet(Sheet):
    def __repr__(self) -> str: ...
    def set_name(self, name: str) -> None: ...

class ImageSheet(Sheet):
    def __repr__(self) -> str: ...

class HtmlSheet(Sheet):
    def __repr__(self) -> str: ...
    def set_name(self, name: str) -> None: ...
    def set_contents(self, contents: str) -> None: ...

class ContextStackFrame:
    context_name: str
    source_file: str
    source_location: tuple[int, int]

class View:
    view_id: int
    selection: Selection
    settings_object: Settings | None
    def __init__(self, id: int) -> None: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __bool__(self) -> bool: ...
    def __repr__(self) -> str: ...
    def id(self) -> int: ...
    def buffer_id(self) -> int: ...
    def buffer(self) -> Buffer: ...
    def sheet_id(self) -> int: ...
    def sheet(self) -> Sheet | None: ...
    def element(self) -> str | None: ...
    def is_valid(self) -> bool: ...
    def is_primary(self) -> bool: ...
    def window(self) -> Window | None: ...
    def clones(self) -> list[View]: ...
    def file_name(self) -> str | None: ...
    def close(self, on_close: Callable[[bool], None] = ...) -> None: ...
    def retarget(self, new_fname: str) -> None: ...
    def name(self) -> str: ...
    def set_name(self, name: str) -> None: ...
    def reset_reference_document(self) -> None: ...
    def set_reference_document(self, reference: str) -> None: ...
    def is_loading(self) -> bool: ...
    def is_dirty(self) -> bool: ...
    def is_read_only(self) -> bool: ...
    def set_read_only(self, read_only: bool) -> None: ...
    def is_scratch(self) -> bool: ...
    def set_scratch(self, scratch: bool) -> None: ...
    def encoding(self) -> str: ...
    def set_encoding(self, encoding_name: str) -> None: ...
    def line_endings(self) -> str: ...
    def set_line_endings(self, line_ending_name: str) -> None: ...
    def size(self) -> int: ...
    def insert(self, edit: Edit, pt: int, text: str) -> int: ...
    def erase(self, edit: Edit, region: Region) -> None: ...
    def replace(self, edit: Edit, region: Region, text: str) -> None: ...
    def change_count(self) -> int: ...
    def change_id(self) -> tuple[int, int, int]: ...
    def transform_region_from(self, region: Region, change_id: tuple[int, int, int]) -> Region: ...
    def run_command(self, cmd: str, args: dict[str, Any] | None = ...) -> None: ...
    def sel(self) -> Selection: ...
    def substr(self, x: Region | int) -> str: ...
    def find(self, pattern: str, start_pt: int, flags: FindFlags = ...) -> Region: ...
    def find_all(self, pattern: str, flags: FindFlags = ..., fmt: str | None = ..., extractions: list[str] | None = ...) -> list[Region]: ...
    def settings(self) -> Settings: ...
    def meta_info(self, key: str, pt: int) -> bool | str | int | float | list[Any] | dict[str, Any] | None: ...
    def extract_tokens_with_scopes(self, region: Region) -> list[tuple[Region, str]]: ...
    def extract_scope(self, pt: int) -> Region: ...
    def expand_to_scope(self, pt: int, selector: str) -> Region | None: ...
    def scope_name(self, pt: int) -> str: ...
    def context_backtrace(self, pt: int) -> list[ContextStackFrame]: ...
    def match_selector(self, pt: int, selector: str) -> bool: ...
    def score_selector(self, pt: int, selector: str) -> int: ...
    def find_by_selector(self, selector: str) -> list[Region]: ...
    def style(self) -> dict[str, str]: ...
    def style_for_scope(self, scope: str) -> dict[str, Any]: ...
    def has_non_empty_selection_region(self) -> bool: ...
    def lines(self, region: Region) -> list[Region]: ...
    def split_by_newlines(self, region: Region) -> list[Region]: ...
    def line(self, x: Region | int) -> Region: ...
    def full_line(self, x: Region | int) -> Region: ...
    def word(self, x: Region | int) -> Region: ...
    def classify(self, pt: int) -> PointClassification: ...
    def find_by_class(self, pt: int, forward: bool, classes: PointClassification, separators: str = ..., sub_word_separators: str = ...) -> int: ...
    def expand_by_class(self, x: Region | int, classes: PointClassification, separators: str = ..., sub_word_separators: str = ...) -> Region: ...
    def rowcol(self, tp: int) -> tuple[int, int]: ...
    def rowcol_utf8(self, tp: int) -> tuple[int, int]: ...
    def rowcol_utf16(self, tp: int) -> tuple[int, int]: ...
    def text_point(self, row: int, col: int, *, clamp_column: bool = ...) -> int: ...
    def text_point_utf8(self, row: int, col_utf8: int, *, clamp_column: bool = ...) -> int: ...
    def text_point_utf16(self, row: int, col_utf16: int, *, clamp_column: bool = ...) -> int: ...
    def utf8_code_units(self, tp: int | None = ...) -> int: ...
    def utf16_code_units(self, tp: int | None = ...) -> int: ...
    def visible_region(self) -> Region: ...
    def show(self, location: Region | Selection | int, show_surrounds: bool = ..., keep_to_left: bool = ..., animate: bool = ...) -> None: ...
    def show_at_center(self, location: Region | int, animate: bool = ...) -> None: ...
    def viewport_position(self) -> tuple[int, int]: ...
    def set_viewport_position(self, xy: tuple[int, int], animate: bool = ...) -> None: ...
    def viewport_extent(self) -> tuple[int, int]: ...
    def layout_extent(self) -> tuple[int, int]: ...
    def text_to_layout(self, tp: int) -> tuple[int, int]: ...
    def text_to_window(self, tp: int) -> tuple[int, int]: ...
    def layout_to_text(self, xy: tuple[int, int]) -> int: ...
    def layout_to_window(self, xy: tuple[int, int]) -> tuple[int, int]: ...
    def window_to_layout(self, xy: tuple[int, int]) -> tuple[int, int]: ...
    def window_to_text(self, xy: tuple[int, int]) -> int: ...
    def line_height(self) -> float: ...
    def em_width(self) -> float: ...
    def is_folded(self, region: Region) -> bool: ...
    def folded_regions(self) -> list[Region]: ...
    def fold(self, x: Region | list[Region]) -> bool: ...
    def unfold(self, x: Region | list[Region]) -> list[Region]: ...
    def add_regions(self, key: str, regions: list[Region], scope: str = ..., icon: str = ..., flags: RegionFlags = ..., annotations: list[str] = ..., annotation_color: str = ..., on_navigate: Callable[[str], None] = ..., on_close: Callable[[], None] = ...) -> None: ...
    def get_regions(self, key: str) -> list[Region]: ...
    def erase_regions(self, key: str) -> None: ...
    def assign_syntax(self, syntax: str | Syntax) -> None: ...
    def set_syntax_file(self, syntax_file: str) -> None: ...
    def syntax(self) -> Syntax | None: ...
    def symbols(self) -> list[tuple[Region, str]]: ...
    def get_symbols(self) -> list[tuple[Region, str]]: ...
    def indexed_symbols(self) -> list[tuple[Region, str]]: ...
    def indexed_references(self) -> list[tuple[Region, str]]: ...
    def symbol_regions(self) -> list[SymbolRegion]: ...
    def indexed_symbol_regions(self, type: SymbolType = ...) -> list[SymbolRegion]: ...
    def set_status(self, key: str, value: str) -> None: ...
    def get_status(self, key: str) -> str: ...
    def erase_status(self, key: str) -> None: ...
    def extract_completions(self, prefix: str, tp: int = ...) -> list[str]: ...
    def command_history(self, index: int, modifying_only: bool = ...) -> tuple[str | None, dict | None, int]: ...
    def overwrite_status(self) -> bool: ...
    def set_overwrite_status(self, value: bool) -> None: ...
    def show_popup_menu(self, items: list[str], on_done: Callable[[int], None], flags: int = ...) -> None: ...
    def show_popup(self, content: str, flags: PopupFlags = ..., location: int = ..., max_width: int = ..., max_height: int = ..., on_navigate: Callable[[str], None] | None = ..., on_hide: Callable[[], None] | None = ...) -> None: ...
    def update_popup(self, content: str) -> None: ...
    def is_popup_visible(self) -> bool: ...
    def hide_popup(self) -> None: ...
    def is_auto_complete_visible(self) -> bool: ...
    def preserve_auto_complete_on_focus_lost(self) -> None: ...
    def export_to_html(self, regions: Region | list[Region] | None = ..., minihtml: bool = ..., enclosing_tags: bool = ..., font_size: bool = ..., font_family: bool = ...) -> str: ...
    def clear_undo_stack(self) -> None: ...

class Buffer:
    buffer_id: int
    def __init__(self, id: int) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def id(self) -> int: ...
    def file_name(self) -> str | None: ...
    def views(self) -> list[View]: ...
    def primary_view(self) -> View: ...

class Settings:
    settings_id: int
    def __init__(self, id: int) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def __repr__(self) -> str: ...
    def to_dict(self) -> dict[str, Any]: ...
    def setdefault(self, key: str, value: Any) -> Any: ...
    def update(self, other: Any = ..., /, **kwargs: dict[str, Any]) -> None: ...
    def get(self, key: str, default: bool | str | int | float | list[Any] | dict[str, Any] | None = ...) -> Any: ...
    def has(self, key: str) -> bool: ...
    def set(self, key: str, value: bool | str | int | float | list[Any] | dict[str, Any] | None) -> None: ...
    def erase(self, key: str) -> None: ...
    def add_on_change(self, tag: str, callback: Callable[[], None]) -> None: ...
    def clear_on_change(self, tag: str) -> None: ...

class Phantom:
    region: Region
    content: str
    layout: PhantomLayout
    on_navigate: Callable[[str], None] | None
    def __init__(self, region: Region, content: str, layout: PhantomLayout, on_navigate: Callable[[str], None] | None = ...) -> None: ...
    def __eq__(self, rhs: Any) -> bool: ...
    def __repr__(self) -> str: ...
    def to_tuple(self) -> tuple[tuple[int, int], str, int, Callable[[str], None] | None]: ...

class PhantomSet:
    view: View
    key: str
    phantoms: list[Phantom]
    def __init__(self, view: View, key: str = ...) -> None: ...
    def __del__(self) -> None: ...
    def __repr__(self) -> str: ...
    def update(self, phantoms: Iterable[Phantom]) -> None: ...

class Html:
    data: str
    def __init__(self, data: str) -> None: ...
    def __repr__(self) -> str: ...

class CompletionList:
    target: Any
    completions: list[str] | list[tuple[str, str]] | list[CompletionItem] | None
    flags: AutoCompleteFlags
    def __init__(self, completions: list[str] | list[tuple[str, str]] | list[CompletionItem] | None = ..., flags: AutoCompleteFlags = ...) -> None: ...
    def __repr__(self) -> str: ...
    def set_completions(self, completions: list[str] | list[tuple[str, str]] | list[CompletionItem], flags: AutoCompleteFlags = ...) -> None: ...

class CompletionItem:
    trigger: str
    annotation: str
    completion: str
    completion_format: int
    kind: tuple[int, str, str]
    details: str
    flags: CompletionItemFlags
    def __init__(self, trigger: str, annotation: str = ..., completion: str = ..., completion_format: CompletionFormat = ..., kind: tuple[int, str, str] = ..., details: str = ..., flags: CompletionItemFlags = ...) -> None: ...
    def __eq__(self, rhs: CompletionItem) -> bool: ...
    def __repr__(self) -> str: ...
    @classmethod
    def snippet_completion(cls, trigger: str, snippet: str, annotation: str = ..., kind: tuple[int, str, str] = ..., details: str = ...) -> CompletionItem: ...
    @classmethod
    def command_completion(cls, trigger: str, command: str, args: dict[str, Any] = ..., annotation: str = ..., kind: tuple[int, str, str] = ..., details: str = ...) -> CompletionItem: ...

def list_syntaxes() -> list[Syntax]: ...
def syntax_from_path(path: str) -> Syntax | None: ...
def find_syntax_by_name(name: str) -> list[Syntax]: ...
def find_syntax_by_scope(scope: str) -> list[Syntax]: ...
def find_syntax_for_file(path: str, first_line: str = ...) -> Syntax | None: ...

class Syntax:
    path: str
    name: str
    hidden: bool
    scope: str
    def __init__(self, path: str, name: str, hidden: bool, scope: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class QuickPanelItem:
    trigger: str
    details: str | list[str] | tuple[str]
    annotation: str
    kind: tuple[int, str, str]
    def __init__(self, trigger: str, details: str | Sequence[str] = ..., annotation: str = ..., kind: tuple[int, str, str] = ...) -> None: ...
    def __repr__(self) -> str: ...

class ListInputItem:
    text: str
    value: Any
    details: str | list[str] | tuple[str]
    annotation: str
    kind: tuple[int, str, str]
    def __init__(self, text: str, value: bool | str | int | float | list[Any] | dict[str, Any] | None, details: str | Sequence[str] = ..., annotation: str = ..., kind: tuple[int, str, str] = ...) -> None: ...
    def __repr__(self) -> str: ...

class SymbolRegion:
    name: str
    region: Region
    syntax: str
    type: int
    kind: tuple[int, str, str]
    def __init__(self, name: str, region: Region, syntax: str, type: int, kind: tuple[int, str, str]) -> None: ...
    def __repr__(self) -> str: ...

class SymbolLocation:
    path: str
    display_name: str
    row: int
    col: int
    syntax: str
    type: int
    kind: tuple[int, str, str]
    def __init__(self, path: str, display_name: str, row: int, col: int, syntax: str, type: int, kind: tuple[int, str, str]) -> None: ...
    def __repr__(self) -> str: ...
    def path_encoded_position(self) -> str: ...
