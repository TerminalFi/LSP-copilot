import sublime
from LSP.plugin.core.promise import Promise as Promise
from LSP.plugin.core.types import ClientConfig
from _typeshed import Incomplete
from typing import Any, Generator
from unittesting import DeferrableTestCase

CI: Incomplete
TIMEOUT_TIME: Incomplete
text_config: Incomplete

class YieldPromise:
    __slots__: Incomplete
    __done: bool
    def __init__(self) -> None: ...
    def __call__(self) -> bool: ...
    __result: Incomplete
    def fulfill(self, result: Any = None) -> None: ...
    def result(self) -> Any: ...

def make_stdio_test_config() -> ClientConfig: ...
def make_tcp_test_config() -> ClientConfig: ...
def add_config(config) -> None: ...
def remove_config(config) -> None: ...
def close_test_view(view: sublime.View | None) -> Generator: ...
def expand(s: str, w: sublime.Window) -> str: ...

class TextDocumentTestCase(DeferrableTestCase):
    @classmethod
    def get_stdio_test_config(cls) -> ClientConfig: ...
    @classmethod
    def setUpClass(cls) -> Generator: ...
    def setUp(self) -> Generator: ...
    @classmethod
    def get_test_name(cls) -> str: ...
    @classmethod
    def get_test_server_capabilities(cls) -> dict: ...
    @classmethod
    def init_view_settings(cls) -> None: ...
    @classmethod
    def ensure_document_listener_created(cls) -> bool: ...
    @classmethod
    def await_message(cls, method: str, promise: YieldPromise | None = None) -> Generator: ...
    def make_server_do_fake_request(self, method: str, params: Any) -> YieldPromise: ...
    @classmethod
    def await_promise(cls, promise: YieldPromise | Promise) -> Generator: ...
    def await_run_code_action(self, code_action: dict[str, Any]) -> Generator: ...
    def set_response(self, method: str, response: Any) -> None: ...
    def set_responses(self, responses: list[tuple[str, Any]]) -> Generator: ...
    def await_client_notification(self, method: str, params: Any = None) -> Generator: ...
    def await_clear_view_and_save(self) -> Generator: ...
    def await_view_change(self, expected_change_count: int) -> Generator: ...
    def insert_characters(self, characters: str) -> int: ...
    @classmethod
    def tearDownClass(cls) -> Generator: ...
    def doCleanups(self) -> Generator: ...
