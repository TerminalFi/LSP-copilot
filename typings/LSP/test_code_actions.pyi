import sublime
import unittest
from LSP.plugin.core.views import Point, Range as Range
from _typeshed import Incomplete
from setup import TextDocumentTestCase
from typing import Any, Generator

TEST_FILE_URI: Incomplete

def edit_to_lsp(edit: tuple[str, Range]) -> dict[str, Any]: ...
def range_from_points(start: Point, end: Point) -> Range: ...
def create_code_action_edit(view: sublime.View, version: int, edits: list[tuple[str, Range]]) -> dict[str, Any]: ...
def create_command(command_name: str, command_args: list[Any] | None = None) -> dict[str, Any]: ...
def create_test_code_action(view: sublime.View, version: int, edits: list[tuple[str, Range]], kind: str | None = None) -> dict[str, Any]: ...
def create_test_code_action2(command_name: str, command_args: list[Any] | None = None, kind: str | None = None) -> dict[str, Any]: ...
def create_disabled_code_action(view: sublime.View, version: int, edits: list[tuple[str, Range]]) -> dict[str, Any]: ...
def create_test_diagnostics(diagnostics: list[tuple[str, Range]]) -> dict: ...

class CodeActionsOnSaveTestCase(TextDocumentTestCase):
    @classmethod
    def init_view_settings(cls) -> None: ...
    @classmethod
    def get_test_server_capabilities(cls) -> dict: ...
    def doCleanups(self) -> Generator: ...
    def test_applies_matching_kind(self) -> Generator: ...
    def test_requests_with_diagnostics(self) -> Generator: ...
    def test_applies_only_one_pass(self) -> Generator: ...
    def test_applies_immediately_after_text_change(self) -> Generator: ...
    def test_no_fix_on_non_matching_kind(self) -> Generator: ...
    def test_does_not_apply_unsupported_kind(self) -> Generator: ...
    def _setup_document_with_missing_semicolon(self) -> Generator: ...

class CodeActionMatchingTestCase(unittest.TestCase):
    def test_does_not_match(self) -> None: ...
    def test_matches_exact_action(self) -> None: ...
    def test_matches_more_specific_action(self) -> None: ...
    def test_does_not_match_disabled_action(self) -> None: ...
    def test_kind_matching(self) -> None: ...

class CodeActionsListenerTestCase(TextDocumentTestCase):
    original_debounce_time: Incomplete
    def setUp(self) -> Generator: ...
    def tearDown(self) -> None: ...
    @classmethod
    def get_test_server_capabilities(cls) -> dict: ...
    def test_requests_with_diagnostics(self) -> Generator: ...
    def test_requests_with_no_diagnostics(self) -> Generator: ...
    def test_excludes_disabled_code_actions(self) -> Generator: ...
    def test_extends_range_to_include_diagnostics(self) -> Generator: ...

class CodeActionsTestCase(TextDocumentTestCase):
    @classmethod
    def get_test_server_capabilities(cls) -> dict: ...
    def test_requests_code_actions_on_newly_published_diagnostics(self) -> Generator: ...
    def test_applies_code_action_with_matching_document_version(self) -> Generator: ...
    def test_does_not_apply_with_nonmatching_document_version(self) -> Generator: ...
    def test_runs_command_in_resolved_code_action(self) -> Generator: ...
    def test_applies_correctly_after_emoji(self) -> Generator: ...
