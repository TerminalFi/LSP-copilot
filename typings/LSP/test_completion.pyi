from LSP.plugin.core.protocol import CompletionItem as CompletionItem, CompletionItemDefaults as CompletionItemDefaults, CompletionItemLabelDetails as CompletionItemLabelDetails
from _typeshed import Incomplete
from setup import TextDocumentTestCase
from typing import Any, Callable, Generator
from unittest import TestCase

additional_edits: Incomplete

class CompletionsTestsBase(TextDocumentTestCase):
    @classmethod
    def init_view_settings(cls) -> None: ...
    def type(self, text: str) -> None: ...
    def move_cursor(self, row: int, col: int) -> None: ...
    def create_commit_completion_closure(self, commit_completion_command: str = 'commit_completion') -> Callable[[], bool]: ...
    def select_completion(self) -> Generator: ...
    def shift_select_completion(self) -> Generator: ...
    def read_file(self) -> str: ...
    def verify(self, *, completion_items: list[dict[str, Any]], insert_text: str, expected_text: str) -> Generator: ...

class QueryCompletionsTests(CompletionsTestsBase):
    def test_none(self) -> Generator: ...
    def test_simple_label(self) -> Generator: ...
    def test_prefer_insert_text_over_label(self) -> Generator: ...
    def test_prefer_text_edit_over_insert_text(self) -> Generator: ...
    def test_simple_insert_text(self) -> Generator: ...
    def test_var_prefix_using_label(self) -> Generator: ...
    def test_var_prefix_added_in_insertText(self) -> Generator: ...
    def test_pure_insertion_text_edit(self) -> Generator: ...
    def test_space_added_in_label(self) -> Generator: ...
    def test_dash_missing_from_label(self) -> Generator: ...
    def test_edit_before_cursor(self) -> Generator: ...
    def test_edit_after_nonword(self) -> Generator: ...
    def test_filter_text_is_not_a_prefix_of_label(self) -> Generator: ...
    def test_additional_edits_if_session_has_the_resolve_capability(self) -> Generator: ...
    def test_prefix_should_include_the_dollar_sign(self) -> Generator: ...
    def test_fuzzy_match_plaintext_insert_text(self) -> Generator: ...
    def test_fuzzy_match_plaintext_text_edit(self) -> Generator: ...
    def test_fuzzy_match_snippet_insert_text(self) -> Generator: ...
    def test_fuzzy_match_snippet_text_edit(self) -> Generator: ...
    def verify_multi_cursor(self, completion: dict[str, Any]) -> Generator: ...
    def test_multi_cursor_plaintext_insert_text(self) -> Generator: ...
    def test_multi_cursor_plaintext_text_edit(self) -> Generator: ...
    def test_multi_cursor_snippet_insert_text(self) -> Generator: ...
    def test_multi_cursor_snippet_text_edit(self) -> Generator: ...
    def test_nontrivial_text_edit_removal(self) -> Generator: ...
    def test_nontrivial_text_edit_removal_with_buffer_modifications_clangd(self) -> Generator: ...
    def test_nontrivial_text_edit_removal_with_buffer_modifications_json(self) -> Generator: ...
    def test_text_edit_plaintext_with_multiple_lines_indented(self) -> Generator[None, None, None]: ...
    def test_insert_insert_mode(self) -> Generator: ...
    def test_replace_insert_mode(self) -> Generator: ...
    def test_show_deprecated_flag(self) -> None: ...
    def test_show_deprecated_tag(self) -> None: ...
    def test_strips_carriage_return_in_insert_text(self) -> Generator: ...
    def test_strips_carriage_return_in_text_edit(self) -> Generator: ...
    def test_label_details_with_filter_text(self) -> None: ...
    def test_label_details_without_filter_text(self) -> None: ...

class QueryCompletionsNoResolverTests(CompletionsTestsBase):
    @classmethod
    def get_test_server_capabilities(cls) -> dict: ...
    def test_additional_edits_if_session_does_not_have_the_resolve_capability(self) -> Generator: ...

class ItemDefaultTests(TestCase):
    def test_respects_defaults_for_completion(self) -> None: ...
    def test_defaults_should_not_override_completion_fields_if_present(self) -> None: ...
    def test_conversion_of_edit_range_to_text_edit_when_it_includes_insert_replace_fields(self) -> None: ...

class FormatCompletionsUnitTests(TestCase):
    def _verify_completion(self, payload: CompletionItem, trigger: str, annotation: str = '', details: str = '', flags: int = 0) -> None: ...
    def test_label(self) -> None: ...
    def test_detail(self) -> None: ...
    def test_label_details(self) -> None: ...
    def test_label_details_2(self) -> None: ...
    def test_label_details_3(self) -> None: ...
    def test_label_details_4(self) -> None: ...
    def test_label_details_5(self) -> None: ...
    def test_filter_text_1(self) -> None: ...
    def test_filter_text_2(self) -> None: ...
    def test_filter_text_3(self) -> None: ...
    def test_filter_text_4(self) -> None: ...
    def test_filter_text_and_label_details_1(self) -> None: ...
    def test_filter_text_and_label_details_3(self) -> None: ...
    def test_filter_text_and_label_details_4(self) -> None: ...
