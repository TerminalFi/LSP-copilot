import unittest
from LSP.plugin import FileWatcher, FileWatcherEvent as FileWatcherEvent, FileWatcherEventType as FileWatcherEventType, FileWatcherProtocol as FileWatcherProtocol
from LSP.plugin.core.types import ClientConfig
from _typeshed import Incomplete
from setup import TextDocumentTestCase
from typing import Generator

def setup_workspace_folder() -> str: ...

class TestFileWatcher(FileWatcher):
    _active_watchers: list[TestFileWatcher]
    @classmethod
    def create(cls, root_path: str, patterns: list[str], events: list[FileWatcherEventType], ignores: list[str], handler: FileWatcherProtocol) -> TestFileWatcher: ...
    root_path: Incomplete
    patterns: Incomplete
    events: Incomplete
    ignores: Incomplete
    handler: Incomplete
    def __init__(self, root_path: str, patterns: list[str], events: list[FileWatcherEventType], ignores: list[str], handler: FileWatcherProtocol) -> None: ...
    def destroy(self) -> None: ...
    def trigger_event(self, events: list[FileWatcherEvent]) -> None: ...

class FileWatcherDocumentTestCase(TextDocumentTestCase):
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
    folder_root_path: Incomplete
    def setUp(self) -> Generator: ...
    def tearDown(self) -> Generator: ...

class FileWatcherStaticTests(FileWatcherDocumentTestCase):
    @classmethod
    def get_stdio_test_config(cls) -> ClientConfig: ...
    def test_initialize_params_includes_capability(self) -> None: ...
    def test_creates_static_watcher(self) -> None: ...
    def test_handles_file_event(self) -> Generator: ...

class FileWatcherDynamicTests(FileWatcherDocumentTestCase):
    def test_handles_dynamic_watcher_registration(self) -> Generator: ...

class PatternToGlobTests(unittest.TestCase):
    def test_basic_directory_patterns(self) -> None: ...
    def test_complex_directory_patterns(self) -> None: ...
    def test_basic_file_patterns(self) -> None: ...
    def test_complex_file_patterns(self) -> None: ...
    def test_project_relative_patterns(self) -> None: ...
    def _verify_patterns(self, patterns: list[str], expected: list[str], is_directory_pattern: bool, root_path: str | None = None) -> None: ...
