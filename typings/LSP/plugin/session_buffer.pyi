import sublime
from .core.constants import DOCUMENT_LINK_FLAGS as DOCUMENT_LINK_FLAGS, RegionKey as RegionKey, SEMANTIC_TOKEN_FLAGS as SEMANTIC_TOKEN_FLAGS
from .core.protocol import ColorInformation as ColorInformation, Diagnostic as Diagnostic, DocumentDiagnosticParams as DocumentDiagnosticParams, DocumentDiagnosticReport as DocumentDiagnosticReport, DocumentDiagnosticReportKind as DocumentDiagnosticReportKind, DocumentLink as DocumentLink, DocumentUri as DocumentUri, FullDocumentDiagnosticReport as FullDocumentDiagnosticReport, InlayHint as InlayHint, InlayHintParams as InlayHintParams, LSPErrorCodes as LSPErrorCodes, Request as Request, ResponseError as ResponseError, SemanticTokensDeltaParams as SemanticTokensDeltaParams, SemanticTokensParams as SemanticTokensParams, SemanticTokensRangeParams as SemanticTokensRangeParams, TextDocumentSaveReason as TextDocumentSaveReason, TextDocumentSyncKind as TextDocumentSyncKind
from .core.sessions import Session as Session, SessionViewProtocol as SessionViewProtocol, is_diagnostic_server_cancellation_data as is_diagnostic_server_cancellation_data
from .core.settings import userprefs as userprefs
from .core.types import Capabilities as Capabilities, DebouncerNonThreadSafe as DebouncerNonThreadSafe, FEATURES_TIMEOUT as FEATURES_TIMEOUT, WORKSPACE_DIAGNOSTICS_TIMEOUT as WORKSPACE_DIAGNOSTICS_TIMEOUT, debounced as debounced
from .core.views import DiagnosticSeverityData as DiagnosticSeverityData, MissingUriError as MissingUriError, diagnostic_severity as diagnostic_severity, did_change as did_change, did_close as did_close, did_open as did_open, did_save as did_save, document_color_params as document_color_params, entire_content_range as entire_content_range, lsp_color_to_phantom as lsp_color_to_phantom, range_to_region as range_to_region, region_to_range as region_to_range, text_document_identifier as text_document_identifier, will_save as will_save
from .inlay_hint import inlay_hint_to_phantom as inlay_hint_to_phantom
from .semantic_highlighting import SemanticToken as SemanticToken
from _typeshed import Incomplete
from typing import Any, Callable, Iterable, Protocol
from typing_extensions import TypeGuard
from weakref import WeakSet

HUGE_FILE_SIZE: int

class CallableWithOptionalArguments(Protocol):
    def __call__(self, *args: Any) -> None: ...

def is_full_document_diagnostic_report(response: DocumentDiagnosticReport) -> TypeGuard[FullDocumentDiagnosticReport]: ...

class PendingChanges:
    __slots__: Incomplete
    version: Incomplete
    changes: Incomplete
    def __init__(self, version: int, changes: Iterable[sublime.TextChange]) -> None: ...
    def update(self, version: int, changes: Iterable[sublime.TextChange]) -> None: ...

class PendingDocumentDiagnosticRequest:
    __slots__: Incomplete
    version: Incomplete
    request_id: Incomplete
    def __init__(self, version: int, request_id: int) -> None: ...

class SemanticTokensData:
    __slots__: Incomplete
    data: Incomplete
    result_id: Incomplete
    active_region_keys: Incomplete
    tokens: Incomplete
    view_change_count: int
    needs_refresh: bool
    pending_response: Incomplete
    def __init__(self) -> None: ...

class SessionBuffer:
    opened: bool
    capabilities: Incomplete
    _session: Incomplete
    _session_views: Incomplete
    _last_known_uri: Incomplete
    _id: Incomplete
    _pending_changes: Incomplete
    diagnostics: Incomplete
    diagnostics_data_per_severity: Incomplete
    _diagnostics_version: int
    diagnostics_flags: int
    _diagnostics_are_visible: bool
    document_diagnostic_needs_refresh: bool
    _document_diagnostic_pending_request: Incomplete
    _last_synced_version: int
    _last_text_change_time: float
    _diagnostics_debouncer_async: Incomplete
    _workspace_diagnostics_debouncer_async: Incomplete
    _color_phantoms: Incomplete
    _document_links: Incomplete
    semantic_tokens: Incomplete
    _semantic_region_keys: Incomplete
    _last_semantic_region_key: int
    _inlay_hints_phantom_set: Incomplete
    inlay_hints_needs_refresh: bool
    _is_saving: bool
    _has_changed_during_save: bool
    def __init__(self, session_view: SessionViewProtocol, buffer_id: int, uri: DocumentUri) -> None: ...
    @property
    def session(self) -> Session: ...
    @property
    def session_views(self) -> WeakSet[SessionViewProtocol]: ...
    @property
    def version(self) -> int | None: ...
    def _check_did_open(self, view: sublime.View) -> None: ...
    def _check_did_close(self, view: sublime.View) -> None: ...
    def get_uri(self) -> DocumentUri | None: ...
    def get_language_id(self) -> str | None: ...
    def get_view_in_group(self, group: int) -> sublime.View: ...
    @property
    def language_id(self) -> str: ...
    def add_session_view(self, sv: SessionViewProtocol) -> None: ...
    def remove_session_view(self, sv: SessionViewProtocol) -> None: ...
    def _on_before_destroy(self, view: sublime.View) -> None: ...
    def register_capability_async(self, registration_id: str, capability_path: str, registration_path: str, options: dict[str, Any]) -> None: ...
    def unregister_capability_async(self, registration_id: str, capability_path: str, registration_path: str) -> None: ...
    def get_capability(self, capability_path: str) -> Any | None: ...
    def has_capability(self, capability_path: str) -> bool: ...
    def text_sync_kind(self) -> TextDocumentSyncKind: ...
    def should_notify_did_open(self) -> bool: ...
    def should_notify_will_save(self) -> bool: ...
    def should_notify_did_save(self) -> tuple[bool, bool]: ...
    def should_notify_did_close(self) -> bool: ...
    def on_text_changed_async(self, view: sublime.View, change_count: int, changes: Iterable[sublime.TextChange]) -> None: ...
    def _cancel_pending_requests_async(self) -> None: ...
    def on_revert_async(self, view: sublime.View) -> None: ...
    on_reload_async = on_revert_async
    def purge_changes_async(self, view: sublime.View, suppress_requests: bool = False) -> None: ...
    def _on_after_change_async(self, view: sublime.View, version: int, suppress_requests: bool = False) -> None: ...
    def on_pre_save_async(self, view: sublime.View) -> None: ...
    def on_post_save_async(self, view: sublime.View, new_uri: DocumentUri) -> None: ...
    def on_userprefs_changed_async(self) -> None: ...
    def some_view(self) -> sublime.View | None: ...
    def _if_view_unchanged(self, f: Callable[[sublime.View, Any], None], version: int) -> CallableWithOptionalArguments: ...
    def _do_color_boxes_async(self, view: sublime.View, version: int) -> None: ...
    def _on_color_boxes_async(self, view: sublime.View, response: list[ColorInformation]) -> None: ...
    def _do_document_link_async(self, view: sublime.View, version: int) -> None: ...
    def _on_document_link_async(self, view: sublime.View, response: list[DocumentLink] | None) -> None: ...
    def _redraw_document_links_async(self) -> None: ...
    def get_document_link_at_point(self, view: sublime.View, point: int) -> DocumentLink | None: ...
    def update_document_link(self, new_link: DocumentLink) -> None: ...
    def do_document_diagnostic_async(self, view: sublime.View, version: int | None = None, forced_update: bool = False) -> None: ...
    def _on_document_diagnostic_async(self, version: int, response: DocumentDiagnosticReport) -> None: ...
    def _apply_document_diagnostic_async(self, view: sublime.View | None, response: DocumentDiagnosticReport) -> None: ...
    def _on_document_diagnostic_error_async(self, version: int, error: ResponseError) -> None: ...
    def set_document_diagnostic_pending_refresh(self, needs_refresh: bool = True) -> None: ...
    def on_diagnostics_async(self, raw_diagnostics: list[Diagnostic], version: int | None, visible_session_views: set[SessionViewProtocol]) -> None: ...
    def has_latest_diagnostics(self) -> bool: ...
    def do_semantic_tokens_async(self, view: sublime.View, only_viewport: bool = False) -> None: ...
    def _on_semantic_tokens_async(self, response: dict | None) -> None: ...
    def _on_semantic_tokens_viewport_async(self, view: sublime.View, response: dict | None) -> None: ...
    def _on_semantic_tokens_delta_async(self, response: dict | None) -> None: ...
    def _on_semantic_tokens_error_async(self, _: dict) -> None: ...
    def _draw_semantic_tokens_async(self) -> None: ...
    def _get_semantic_region_key_for_scope(self, scope: str) -> int: ...
    def _clear_semantic_token_regions(self, view: sublime.View) -> None: ...
    def set_semantic_tokens_pending_refresh(self, needs_refresh: bool = True) -> None: ...
    def get_semantic_tokens(self) -> list[SemanticToken]: ...
    def _clear_semantic_tokens_async(self) -> None: ...
    def do_inlay_hints_async(self, view: sublime.View) -> None: ...
    def _on_inlay_hints_async(self, response: list[InlayHint] | None) -> None: ...
    def present_inlay_hints(self, phantoms: list[sublime.Phantom]) -> None: ...
    def set_inlay_hints_pending_refresh(self, needs_refresh: bool = True) -> None: ...
    def remove_inlay_hint_phantom(self, phantom_uuid: str) -> None: ...
    def remove_all_inlay_hints(self) -> None: ...
    def __str__(self) -> str: ...
