import sublime
from .core.registry import LspTextCommand as LspTextCommand
from _typeshed import Incomplete
from typing import Any

class SemanticToken:
    __slots__: Incomplete
    region: Incomplete
    type: Incomplete
    modifiers: Incomplete
    def __init__(self, region: sublime.Region, type: str, modifiers: list[str]) -> None: ...

def copy(view: sublime.View, text: str) -> None: ...

class LspShowScopeNameCommand(LspTextCommand):
    capability: str
    def want_event(self) -> bool: ...
    def run(self, _: sublime.Edit) -> None: ...
    def _get_semantic_info(self, point: int) -> tuple[str, str]: ...
    def _render_with_plain_string_stackframes(self, scope: str, scope_list: str, stack: list[str], token_type: str, token_modifiers: str) -> None: ...
    def _render_with_fancy_stackframes(self, scope: str, scope_list: str, stack: list[Any], token_type: str, token_modifiers: str) -> None: ...
    def on_navigate(self, link: str) -> None: ...
