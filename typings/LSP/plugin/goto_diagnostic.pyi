import sublime
import sublime_plugin
from .core.constants import DIAGNOSTIC_KINDS as DIAGNOSTIC_KINDS
from .core.diagnostics_storage import ParsedUri as ParsedUri, is_severity_included as is_severity_included
from .core.input_handlers import PreselectedListInputHandler as PreselectedListInputHandler
from .core.paths import project_base_dir as project_base_dir, project_path as project_path, simple_project_path as simple_project_path
from .core.protocol import Diagnostic as Diagnostic, DiagnosticSeverity as DiagnosticSeverity, DocumentUri as DocumentUri, Location as Location
from .core.registry import windows as windows
from .core.sessions import Session as Session
from .core.settings import userprefs as userprefs
from .core.types import ClientConfig as ClientConfig
from .core.url import parse_uri as parse_uri, unparse_uri as unparse_uri
from .core.views import MissingUriError as MissingUriError, diagnostic_severity as diagnostic_severity, format_diagnostic_for_html as format_diagnostic_for_html, format_diagnostic_source_and_code as format_diagnostic_source_and_code, format_severity as format_severity, get_uri_and_position_from_location as get_uri_and_position_from_location, to_encoded_filename as to_encoded_filename, uri_from_view as uri_from_view
from _typeshed import Incomplete
from pathlib import Path
from typing import Iterator

PREVIEW_PANE_CSS: str

def get_sessions(window: sublime.Window) -> Iterator[Session]: ...

class LspGotoDiagnosticCommand(sublime_plugin.WindowCommand):
    def run(self, uri: DocumentUri | None, diagnostic: dict | None) -> None: ...
    def is_enabled(self, uri: DocumentUri | None = None, diagnostic: dict | None = None) -> bool: ...
    def input(self, args: dict) -> sublime_plugin.CommandInputHandler | None: ...
    def input_description(self) -> str: ...

class DiagnosticUriInputHandler(PreselectedListInputHandler):
    _preview: sublime.View | None
    uri: DocumentUri | None
    window: Incomplete
    view: Incomplete
    def __init__(self, window: sublime.Window, view: sublime.View, initial_value: DocumentUri | None = None) -> None: ...
    def name(self) -> str: ...
    first_locations: Incomplete
    def get_list_items(self) -> tuple[list[sublime.ListInputItem], int]: ...
    def placeholder(self) -> str: ...
    def next_input(self, args: dict) -> sublime_plugin.CommandInputHandler | None: ...
    def confirm(self, value: DocumentUri | None) -> None: ...
    def description(self, value: DocumentUri, text: str) -> str: ...
    def cancel(self) -> None: ...
    def preview(self, value: DocumentUri | None) -> str: ...
    def _simple_project_path(self, parsed_uri: ParsedUri) -> str: ...
    def _project_path(self, parsed_uri: ParsedUri) -> str: ...

class DiagnosticInputHandler(sublime_plugin.ListInputHandler):
    _preview: sublime.View | None
    window: Incomplete
    view: Incomplete
    sessions: Incomplete
    parsed_uri: Incomplete
    def __init__(self, window: sublime.Window, view: sublime.View, uri: DocumentUri) -> None: ...
    def name(self) -> str: ...
    def list_items(self) -> list[sublime.ListInputItem]: ...
    def placeholder(self) -> str: ...
    def next_input(self, args: dict) -> sublime_plugin.CommandInputHandler | None: ...
    def confirm(self, value: list | None) -> None: ...
    def cancel(self) -> None: ...
    def preview(self, value: list | None) -> str | sublime.Html: ...
    def _get_location(self, diagnostic: Diagnostic) -> Location: ...

def diagnostic_location(parsed_uri: ParsedUri, diagnostic: Diagnostic) -> Location: ...
def open_location(session: Session, location: Location, flags: sublime.NewFileFlags = ..., group: int = -1) -> sublime.View: ...
def diagnostic_html(config: ClientConfig, diagnostic: Diagnostic, base_dir: Path | None) -> sublime.Html: ...
def truncate_message(diagnostic: Diagnostic, max_lines: int = 6) -> Diagnostic: ...
