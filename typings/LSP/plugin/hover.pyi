import sublime
import sublime_plugin
from .code_actions import CodeActionOrCommand as CodeActionOrCommand, CodeActionsByConfigName as CodeActionsByConfigName, actions_manager as actions_manager
from .core.constants import HOVER_ENABLED_KEY as HOVER_ENABLED_KEY, RegionKey as RegionKey, SHOW_DEFINITIONS_KEY as SHOW_DEFINITIONS_KEY
from .core.open import lsp_range_from_uri_fragment as lsp_range_from_uri_fragment, open_file_uri as open_file_uri, open_in_browser as open_in_browser
from .core.promise import Promise as Promise
from .core.protocol import Diagnostic as Diagnostic, DocumentLink as DocumentLink, Error as Error, Hover as Hover, Position as Position, Range as Range, Request as Request
from .core.registry import LspTextCommand as LspTextCommand, get_position as get_position, windows as windows
from .core.sessions import AbstractViewListener as AbstractViewListener, SessionBufferProtocol as SessionBufferProtocol
from .core.settings import userprefs as userprefs
from .core.url import parse_uri as parse_uri
from .core.views import FORMAT_MARKED_STRING as FORMAT_MARKED_STRING, FORMAT_MARKUP_CONTENT as FORMAT_MARKUP_CONTENT, MarkdownLangMap as MarkdownLangMap, diagnostic_severity as diagnostic_severity, format_code_actions_for_quick_panel as format_code_actions_for_quick_panel, format_diagnostic_for_html as format_diagnostic_for_html, is_location_href as is_location_href, make_command_link as make_command_link, make_link as make_link, minihtml as minihtml, range_to_region as range_to_region, show_lsp_popup as show_lsp_popup, text_document_position_params as text_document_position_params, unpack_href_location as unpack_href_location, update_lsp_popup as update_lsp_popup
from _typeshed import Incomplete

SessionName = str
ResolvedHover = Hover | Error
_test_contents: list[str]

class LinkKind:
    __slots__: Incomplete
    lsp_name: Incomplete
    label: Incomplete
    subl_cmd_name: Incomplete
    supports_side_by_side: Incomplete
    def __init__(self, lsp_name: str, label: str, subl_cmd_name: str, supports_side_by_side: bool) -> None: ...
    def link(self, point: int, view: sublime.View) -> str: ...

link_kinds: Incomplete

def code_actions_content(actions_by_config: list[CodeActionsByConfigName], lightbulb: bool = True) -> str: ...

class LspHoverCommand(LspTextCommand):
    _base_dir: Incomplete
    _image_resolver: Incomplete
    def __init__(self, view: sublime.View) -> None: ...
    _hover_responses: Incomplete
    _document_links: Incomplete
    _actions_by_config: Incomplete
    _diagnostics_by_config: Incomplete
    def run(self, edit: sublime.Edit, only_diagnostics: bool = False, point: int | None = None, event: dict | None = None) -> None: ...
    def request_symbol_hover_async(self, listener: AbstractViewListener, point: int) -> None: ...
    def _on_all_settled(self, listener: AbstractViewListener, point: int, language_maps: list[MarkdownLangMap | None], responses: list[ResolvedHover]) -> None: ...
    def request_document_link_async(self, listener: AbstractViewListener, point: int) -> None: ...
    def _on_resolved_link(self, session_buffer: SessionBufferProtocol, link: DocumentLink) -> DocumentLink: ...
    def _on_all_document_links_resolved(self, listener: AbstractViewListener, point: int, links: list[DocumentLink]) -> None: ...
    def _handle_code_actions(self, listener: AbstractViewListener, point: int, responses: list[CodeActionsByConfigName]) -> None: ...
    def provider_exists(self, listener: AbstractViewListener, link: LinkKind) -> bool: ...
    def symbol_actions_content(self, listener: AbstractViewListener, point: int) -> str: ...
    def link_content_and_range(self) -> tuple[str, sublime.Region | None]: ...
    def diagnostics_content(self) -> str: ...
    def hover_content(self) -> str: ...
    def hover_range(self) -> sublime.Region | None: ...
    def show_hover(self, listener: AbstractViewListener, point: int, only_diagnostics: bool) -> None: ...
    def _show_hover(self, listener: AbstractViewListener, point: int, only_diagnostics: bool) -> None: ...
    def _on_images_resolved(self, original_contents: str, contents: str) -> None: ...
    def _on_navigate(self, href: str, point: int) -> None: ...
    def handle_code_action_select(self, config_name: str, actions: list[CodeActionOrCommand], index: int) -> None: ...
    def try_open_custom_uri_async(self, href: str) -> None: ...

class LspToggleHoverPopupsCommand(sublime_plugin.WindowCommand):
    def is_enabled(self) -> bool: ...
    def is_checked(self) -> bool: ...
    def run(self) -> None: ...
    def _has_hover_provider(self, view: sublime.View) -> bool: ...
    def _update_views_async(self, enable: bool) -> None: ...
