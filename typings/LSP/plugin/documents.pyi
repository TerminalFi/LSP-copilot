import sublime
import sublime_plugin
from .code_actions import CodeActionOrCommand as CodeActionOrCommand, CodeActionsByConfigName as CodeActionsByConfigName, actions_manager as actions_manager
from .completion import QueryCompletionsTask as QueryCompletionsTask
from .core.constants import DOCUMENT_HIGHLIGHT_KIND_NAMES as DOCUMENT_HIGHLIGHT_KIND_NAMES, DOCUMENT_HIGHLIGHT_KIND_SCOPES as DOCUMENT_HIGHLIGHT_KIND_SCOPES, HOVER_ENABLED_KEY as HOVER_ENABLED_KEY, RegionKey as RegionKey, ST_VERSION as ST_VERSION
from .core.logging import debug as debug
from .core.open import open_in_browser as open_in_browser
from .core.panels import PanelName as PanelName
from .core.protocol import Diagnostic as Diagnostic, DiagnosticSeverity as DiagnosticSeverity, DocumentHighlight as DocumentHighlight, DocumentHighlightKind as DocumentHighlightKind, DocumentHighlightParams as DocumentHighlightParams, DocumentUri as DocumentUri, FoldingRange as FoldingRange, FoldingRangeParams as FoldingRangeParams, Request as Request, SignatureHelp as SignatureHelp, SignatureHelpContext as SignatureHelpContext, SignatureHelpParams as SignatureHelpParams, SignatureHelpTriggerKind as SignatureHelpTriggerKind
from .core.registry import best_session as best_session, get_position as get_position, windows as windows
from .core.sessions import AbstractViewListener as AbstractViewListener, Session as Session, SessionBufferProtocol as SessionBufferProtocol
from .core.settings import userprefs as userprefs
from .core.signature_help import SigHelp as SigHelp
from .core.types import ClientConfig as ClientConfig, DebouncerNonThreadSafe as DebouncerNonThreadSafe, FEATURES_TIMEOUT as FEATURES_TIMEOUT, SettingsRegistration as SettingsRegistration, basescope2languageid as basescope2languageid, debounced as debounced
from .core.url import parse_uri as parse_uri, view_to_uri as view_to_uri
from .core.views import MarkdownLangMap as MarkdownLangMap, diagnostic_severity as diagnostic_severity, first_selection_region as first_selection_region, format_code_actions_for_quick_panel as format_code_actions_for_quick_panel, format_diagnostic_for_html as format_diagnostic_for_html, make_link as make_link, range_to_region as range_to_region, show_lsp_popup as show_lsp_popup, text_document_identifier as text_document_identifier, text_document_position_params as text_document_position_params, update_lsp_popup as update_lsp_popup
from .core.windows import WindowManager as WindowManager
from .folding_range import folding_range_to_range as folding_range_to_range
from .hover import code_actions_content as code_actions_content
from .session_buffer import SessionBuffer as SessionBuffer
from .session_view import SessionView as SessionView
from _typeshed import Incomplete
from typing import Any, Callable, Generator, Iterable, TypeVar
from typing_extensions import Concatenate, ParamSpec
from weakref import WeakValueDictionary

P = ParamSpec('P')
R = TypeVar('R')

def requires_session(func: Callable[Concatenate[DocumentSyncListener, P], R]) -> Callable[Concatenate[DocumentSyncListener, P], R | None]: ...
def is_regular_view(v: sublime.View) -> bool: ...
def previous_non_whitespace_char(view: sublime.View, pt: int) -> str: ...

class TextChangeListener(sublime_plugin.TextChangeListener):
    ids_to_listeners: WeakValueDictionary[int, TextChangeListener]
    @classmethod
    def is_applicable(cls, buffer: sublime.Buffer) -> bool: ...
    view_listeners: Incomplete
    def __init__(self) -> None: ...
    def attach(self, buffer: sublime.Buffer) -> None: ...
    def detach(self) -> None: ...
    def on_text_changed(self, changes: Iterable[sublime.TextChange]) -> None: ...
    def on_reload_async(self) -> None: ...
    def on_revert_async(self) -> None: ...
    def __repr__(self) -> str: ...

class DocumentSyncListener(sublime_plugin.ViewEventListener, AbstractViewListener):
    ACTIVE_DIAGNOSTIC: str
    debounce_time = FEATURES_TIMEOUT
    color_boxes_debounce_time = FEATURES_TIMEOUT
    code_lenses_debounce_time = FEATURES_TIMEOUT
    @classmethod
    def applies_to_primary_view_only(cls) -> bool: ...
    _uri: str
    _current_syntax: Incomplete
    _auto_complete_triggered_manually: bool
    _change_count_on_last_save: int
    _code_lenses_debouncer_async: Incomplete
    _registration: Incomplete
    _completions_task: Incomplete
    _stored_selection: Incomplete
    _should_format_on_paste: bool
    hover_provider_count: int
    def __init__(self, view: sublime.View) -> None: ...
    def __del__(self) -> None: ...
    _language_id: Incomplete
    _manager: Incomplete
    _session_views: Incomplete
    _sighelp: Incomplete
    _lightbulb_line: Incomplete
    _diagnostics_for_selection: Incomplete
    _code_actions_for_selection: Incomplete
    _registered: bool
    def _setup(self) -> None: ...
    def _cleanup(self) -> None: ...
    def _reset(self) -> None: ...
    def on_post_move_window_async(self) -> None: ...
    def on_session_initialized_async(self, session: Session) -> None: ...
    def on_session_shutdown_async(self, session: Session) -> None: ...
    def _diagnostics_async(self, allow_stale: bool = False) -> Generator[tuple[SessionBufferProtocol, list[tuple[Diagnostic, sublime.Region]]], None, None]: ...
    def diagnostics_intersecting_region_async(self, region: sublime.Region) -> tuple[list[tuple[SessionBufferProtocol, list[Diagnostic]]], sublime.Region]: ...
    def diagnostics_touching_point_async(self, pt: int, max_diagnostic_severity_level: int = ...) -> tuple[list[tuple[SessionBufferProtocol, list[Diagnostic]]], sublime.Region]: ...
    def on_diagnostics_updated_async(self, is_view_visible: bool) -> None: ...
    def _update_diagnostic_in_status_bar_async(self) -> None: ...
    def session_buffers_async(self, capability: str | None = None) -> list[SessionBuffer]: ...
    def session_views_async(self) -> list[SessionView]: ...
    def on_text_changed_async(self, change_count: int, changes: Iterable[sublime.TextChange]) -> None: ...
    def get_uri(self) -> DocumentUri: ...
    def set_uri(self, new_uri: DocumentUri) -> None: ...
    def get_language_id(self) -> str: ...
    def on_load_async(self) -> None: ...
    def on_post_move_async(self) -> None: ...
    def on_activated_async(self) -> None: ...
    def on_selection_modified_async(self) -> None: ...
    def _on_selection_modified_debounced_async(self) -> None: ...
    def on_post_save_async(self) -> None: ...
    def _toggle_diagnostics_panel_if_needed_async(self) -> None: ...
    def on_close(self) -> None: ...
    def on_query_context(self, key: str, operator: int, operand: Any, match_all: bool) -> bool | None: ...
    def on_hover(self, point: int, hover_zone: int) -> None: ...
    def _on_hover_gutter_async(self, point: int) -> None: ...
    def on_text_command(self, command_name: str, args: dict | None) -> tuple[str, dict] | None: ...
    def on_post_text_command(self, command_name: str, args: dict[str, Any] | None) -> None: ...
    def on_query_completions(self, prefix: str, locations: list[int]) -> sublime.CompletionList | None: ...
    def _on_query_completions_async(self, clist: sublime.CompletionList, location: int, triggered_manually: bool) -> None: ...
    def _on_query_completions_resolved_async(self, clist: sublime.CompletionList, completions: list[sublime.CompletionItem], flags: sublime.AutoCompleteFlags = ...) -> None: ...
    def do_signature_help_async(self, manual: bool) -> None: ...
    def _get_signature_help_session(self) -> Session | None: ...
    def _on_signature_help(self, response: SignatureHelp | None, point: int, language_map: MarkdownLangMap | None) -> None: ...
    def _show_sighelp_popup(self, content: str, point: int) -> None: ...
    def navigate_signature_help(self, forward: bool) -> None: ...
    def _update_sighelp_popup(self, content: str) -> None: ...
    def _on_sighelp_hide(self) -> None: ...
    def _on_sighelp_navigate(self, href: str) -> None: ...
    def _do_code_actions_async(self) -> None: ...
    def _on_code_actions(self, responses: list[CodeActionsByConfigName]) -> None: ...
    def _on_code_actions_annotation_click(self, href: str) -> None: ...
    def _clear_code_actions_annotation(self) -> None: ...
    def _on_navigate(self, href: str, point: int) -> None: ...
    def handle_code_action_select(self, config_name: str, actions: list[CodeActionOrCommand], index: int) -> None: ...
    def on_code_lens_capability_registered_async(self) -> None: ...
    def _do_code_lenses_async(self) -> None: ...
    def _resolve_visible_code_lenses_async(self) -> None: ...
    def _highlights_key(self, kind: DocumentHighlightKind, multiline: bool) -> str: ...
    def _clear_highlight_regions(self) -> None: ...
    def _is_in_higlighted_region(self, point: int) -> bool: ...
    def _do_highlights_async(self) -> None: ...
    def _on_highlights(self, response: list[DocumentHighlight] | None) -> None: ...
    def _on_initial_folding_ranges(self, kinds: list[str], response: list[FoldingRange] | None) -> None: ...
    def session_async(self, capability: str, point: int | None = None) -> Session | None: ...
    def sessions_async(self, capability: str | None = None) -> list[Session]: ...
    def session_by_name(self, name: str | None = None) -> Session | None: ...
    def get_capability_async(self, session: Session, capability_path: str) -> Any | None: ...
    def has_capability_async(self, session: Session, capability_path: str) -> bool: ...
    def purge_changes_async(self) -> None: ...
    def trigger_on_pre_save_async(self) -> None: ...
    def revert_async(self) -> None: ...
    def reload_async(self) -> None: ...
    def _when_selection_remains_stable_async(self, f: Callable[[], None], r: sublime.Region, after_ms: int) -> None: ...
    def _is_selection_stable_async(self, region: sublime.Region) -> bool: ...
    def _register_async(self) -> None: ...
    def _on_view_updated_async(self) -> None: ...
    def _update_stored_selection_async(self) -> tuple[sublime.Region | None, bool]: ...
    def _format_on_paste_async(self, clipboard_text: str) -> None: ...
    def _clear_session_views_async(self) -> None: ...
    def _on_settings_object_changed(self) -> None: ...
    def __repr__(self) -> str: ...
