from .protocol import Diagnostic as Diagnostic, DiagnosticSeverity as DiagnosticSeverity, DocumentUri as DocumentUri
from .url import parse_uri as parse_uri
from .views import diagnostic_severity as diagnostic_severity
from collections import OrderedDict
from typing import Callable, Iterator, TypeVar

ParsedUri = tuple[str, str]
T = TypeVar('T')

class DiagnosticsStorage(OrderedDict):
    def add_diagnostics_async(self, document_uri: DocumentUri, diagnostics: list[Diagnostic]) -> None: ...
    def filter_map_diagnostics_async(self, pred: Callable[[Diagnostic], bool], f: Callable[[ParsedUri, Diagnostic], T]) -> Iterator[tuple[ParsedUri, list[T]]]: ...
    def filter_map_diagnostics_flat_async(self, pred: Callable[[Diagnostic], bool], f: Callable[[ParsedUri, Diagnostic], T]) -> Iterator[tuple[ParsedUri, T]]: ...
    def sum_total_errors_and_warnings_async(self) -> tuple[int, int]: ...
    def diagnostics_by_document_uri(self, document_uri: DocumentUri) -> list[Diagnostic]: ...
    def diagnostics_by_parsed_uri(self, uri: ParsedUri) -> list[Diagnostic]: ...

def severity_count(severity: int) -> Callable[[list[Diagnostic]], int]: ...
def has_severity(severity: int) -> Callable[[Diagnostic], bool]: ...
def is_severity_included(max_severity: int) -> Callable[[Diagnostic], bool]: ...
