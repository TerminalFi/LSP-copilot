import sublime
from .protocol import WorkspaceFolder as LspWorkspaceFolder
from .types import diff as diff, matches_pattern as matches_pattern, sublime_pattern_to_glob as sublime_pattern_to_glob
from .url import filename_to_uri as filename_to_uri
from _typeshed import Incomplete
from typing import Any

def is_subpath_of(file_path: str, potential_subpath: str) -> bool: ...

class WorkspaceFolder:
    __slots__: Incomplete
    name: Incomplete
    path: Incomplete
    def __init__(self, name: str, path: str) -> None: ...
    @classmethod
    def from_path(cls, path: str) -> WorkspaceFolder: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def to_lsp(self) -> LspWorkspaceFolder: ...
    def uri(self) -> str: ...
    def includes_uri(self, uri: str) -> bool: ...

class ProjectFolders:
    _window: Incomplete
    folders: Incomplete
    _folders_exclude_patterns: Incomplete
    def __init__(self, window: sublime.Window) -> None: ...
    def _update_exclude_patterns(self, folders: list[str]) -> None: ...
    def update(self) -> bool: ...
    def includes_path(self, file_path: str) -> bool: ...
    def includes_excluded_path(self, file_path: str) -> bool: ...
    def contains(self, view_or_file_name: str | sublime.View) -> bool: ...
    def get_workspace_folders(self) -> list[WorkspaceFolder]: ...

def sorted_workspace_folders(folders: list[str], file_path: str) -> list[WorkspaceFolder]: ...
def enable_in_project(window: sublime.Window, config_name: str) -> None: ...
def disable_in_project(window: sublime.Window, config_name: str) -> None: ...
