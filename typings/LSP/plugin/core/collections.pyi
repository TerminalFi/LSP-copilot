from _typeshed import Incomplete
from typing import Any, Generator

class DottedDict:
    __slots__: Incomplete
    _d: Incomplete
    def __init__(self, d: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def from_base_and_override(cls, base: DottedDict, override: dict[str, Any] | None) -> DottedDict: ...
    def get(self, path: str | None = None) -> Any: ...
    def walk(self, path: str) -> Generator[Any, None, None]: ...
    def set(self, path: str, value: Any) -> None: ...
    def remove(self, path: str) -> None: ...
    def copy(self, path: str | None = None) -> Any: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, path: object) -> bool: ...
    def clear(self) -> None: ...
    def assign(self, d: dict[str, Any]) -> None: ...
    def update(self, d: dict[str, Any]) -> None: ...
    def get_resolved(self, variables: dict[str, str]) -> dict[str, Any]: ...
    def _update_recursive(self, current: dict[str, Any], prefix: str) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
