import sublime
import threading
from ...third_party import WebsocketServer
from .configurations import RETRY_COUNT_TIMEDELTA as RETRY_COUNT_TIMEDELTA, RETRY_MAX_COUNT as RETRY_MAX_COUNT, WindowConfigChangeListener as WindowConfigChangeListener, WindowConfigManager as WindowConfigManager
from .diagnostics_storage import is_severity_included as is_severity_included
from .logging import debug as debug, exception_log as exception_log
from .message_request_handler import MessageRequestHandler as MessageRequestHandler
from .panels import LOG_LINES_LIMIT_SETTING_NAME as LOG_LINES_LIMIT_SETTING_NAME, MAX_LOG_LINES_LIMIT_OFF as MAX_LOG_LINES_LIMIT_OFF, MAX_LOG_LINES_LIMIT_ON as MAX_LOG_LINES_LIMIT_ON, PanelManager as PanelManager, PanelName as PanelName
from .protocol import DocumentUri as DocumentUri, Error as Error, LogMessageParams as LogMessageParams, MessageType as MessageType
from .sessions import AbstractViewListener as AbstractViewListener, Logger as Logger, Manager as Manager, Session as Session, get_plugin as get_plugin
from .settings import LspSettingsChangeListener as LspSettingsChangeListener, client_configs as client_configs, userprefs as userprefs
from .transports import create_transport as create_transport
from .types import ClientConfig as ClientConfig, matches_pattern as matches_pattern, sublime_pattern_to_glob as sublime_pattern_to_glob
from .url import parse_uri as parse_uri
from .views import extract_variables as extract_variables, format_diagnostic_for_panel as format_diagnostic_for_panel, make_link as make_link
from .workspace import ProjectFolders as ProjectFolders, sorted_workspace_folders as sorted_workspace_folders
from _typeshed import Incomplete
from tree_view import TreeViewSheet as TreeViewSheet
from typing import Any, Generator

_NO_DIAGNOSTICS_PLACEHOLDER: str

def extract_message(params: Any) -> str: ...
def set_diagnostics_count(view: sublime.View, errors: int, warnings: int) -> None: ...

class WindowManager(Manager, WindowConfigChangeListener):
    _window: Incomplete
    _config_manager: Incomplete
    _sessions: Incomplete
    _workspace: Incomplete
    _pending_listeners: Incomplete
    _listeners: Incomplete
    _new_listener: Incomplete
    _new_session: Incomplete
    _panel_code_phantoms: Incomplete
    _server_log: Incomplete
    panel_manager: Incomplete
    tree_view_sheets: Incomplete
    formatters: Incomplete
    suppress_sessions_restart_on_project_update: bool
    total_error_count: int
    total_warning_count: int
    def __init__(self, window: sublime.Window, workspace: ProjectFolders, config_manager: WindowConfigManager) -> None: ...
    @property
    def window(self) -> sublime.Window: ...
    def get_and_clear_server_log(self) -> list[tuple[str, str]]: ...
    def get_config_manager(self) -> WindowConfigManager: ...
    def get_sessions(self) -> Generator[Session, None, None]: ...
    def on_load_project_async(self) -> None: ...
    def on_post_save_project_async(self) -> None: ...
    def update_workspace_folders_async(self) -> None: ...
    def enable_config_async(self, config_name: str) -> None: ...
    def disable_config_async(self, config_name: str) -> None: ...
    def register_listener_async(self, listener: AbstractViewListener) -> None: ...
    def unregister_listener_async(self, listener: AbstractViewListener) -> None: ...
    def listeners(self) -> Generator[AbstractViewListener, None, None]: ...
    def listener_for_view(self, view: sublime.View) -> AbstractViewListener | None: ...
    def _dequeue_listener_async(self) -> None: ...
    def _publish_sessions_to_listener_async(self, listener: AbstractViewListener) -> None: ...
    def sessions(self, view: sublime.View, capability: str | None = None) -> Generator[Session, None, None]: ...
    def get_session(self, config_name: str, file_path: str) -> Session | None: ...
    def _can_start_config(self, config_name: str, file_path: str) -> bool: ...
    def _find_session(self, config_name: str, file_path: str) -> Session | None: ...
    def _needed_config(self, view: sublime.View) -> ClientConfig | None: ...
    def start_async(self, config: ClientConfig, initiating_view: sublime.View) -> None: ...
    def _on_post_session_initialize(self, initiating_view: sublime.View, session: Session, is_error: bool = False) -> None: ...
    def _create_logger(self, config_name: str) -> Logger: ...
    def handle_message_request(self, session: Session, params: Any, request_id: Any) -> None: ...
    def restart_sessions_async(self, config_names: list[str]) -> None: ...
    def _end_sessions_async(self, config_names: list[str] | None = None) -> None: ...
    def get_project_path(self, file_path: str) -> str | None: ...
    def should_ignore_diagnostics(self, uri: DocumentUri, configuration: ClientConfig) -> str | None: ...
    def on_post_exit_async(self, session: Session, exit_code: int, exception: Exception | None) -> None: ...
    def destroy(self) -> None: ...
    def handle_log_message(self, session: Session, params: LogMessageParams) -> None: ...
    def handle_stderr_log(self, session: Session, message: str) -> None: ...
    def handle_server_message_async(self, server_name: str, message: str) -> None: ...
    def log_server_message(self, prefix: str, message: str) -> None: ...
    def get_log_lines_limit(self) -> int: ...
    def is_log_lines_limit_enabled(self) -> bool: ...
    def handle_show_message(self, session: Session, params: Any) -> None: ...
    def on_diagnostics_updated(self) -> None: ...
    def update_diagnostics_panel_async(self) -> None: ...
    def _update_panel_main_thread(self, characters: str, prephantoms: list[tuple[int, int, str, str]]) -> None: ...
    def on_configs_changed(self, configs: list[ClientConfig]) -> None: ...

class WindowRegistry(LspSettingsChangeListener):
    _enabled: bool
    _windows: Incomplete
    def __init__(self) -> None: ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...
    def lookup(self, window: sublime.Window | None) -> WindowManager | None: ...
    def listener_for_view(self, view: sublime.View) -> AbstractViewListener | None: ...
    def discard(self, window: sublime.Window) -> None: ...
    def on_client_config_updated(self, config_name: str | None = None) -> None: ...
    def on_userprefs_updated(self) -> None: ...

class RequestTimeTracker:
    _start_times: Incomplete
    def __init__(self) -> None: ...
    def start_tracking(self, request_id: int) -> None: ...
    def end_tracking(self, request_id: int) -> str: ...
    @classmethod
    def formatted_now(cls) -> str: ...

class PanelLogger(Logger):
    _manager: Incomplete
    _server_name: Incomplete
    _request_time_tracker: Incomplete
    def __init__(self, manager: WindowManager, server_name: str) -> None: ...
    def stderr_message(self, message: str) -> None: ...
    def log(self, message: str, params: Any) -> None: ...
    def outgoing_response(self, request_id: Any, params: Any) -> None: ...
    def outgoing_error_response(self, request_id: Any, error: Error) -> None: ...
    def outgoing_request(self, request_id: int, method: str, params: Any) -> None: ...
    def outgoing_notification(self, method: str, params: Any) -> None: ...
    def incoming_response(self, request_id: int | None, params: Any, is_error: bool) -> None: ...
    def incoming_request(self, request_id: Any, method: str, params: Any) -> None: ...
    def incoming_notification(self, method: str, params: Any, unhandled: bool) -> None: ...
    def _format_response(self, direction: str, request_id: Any, duration: str) -> str: ...
    def _format_request(self, direction: str, method: str, request_id: Any) -> str: ...
    def _format_notification(self, direction: str, method: str) -> str: ...

class RemoteLogger(Logger):
    PORT: int
    DIRECTION_OUTGOING: int
    DIRECTION_INCOMING: int
    _ws_server: WebsocketServer | None
    _ws_server_thread: threading.Thread | None
    _last_id: int
    _server_name: Incomplete
    def __init__(self, manager: WindowManager, server_name: str) -> None: ...
    def _start_server(self) -> None: ...
    def _stop_server(self) -> None: ...
    def _on_new_client(self, client: dict, server: WebsocketServer) -> None: ...
    def _on_client_left(self, client: dict, server: WebsocketServer) -> None: ...
    def _on_message_received(self, client: dict, server: WebsocketServer, message: str) -> None: ...
    def stderr_message(self, message: str) -> None: ...
    def outgoing_request(self, request_id: int, method: str, params: Any) -> None: ...
    def incoming_response(self, request_id: int | None, params: Any, is_error: bool) -> None: ...
    def incoming_request(self, request_id: Any, method: str, params: Any) -> None: ...
    def outgoing_response(self, request_id: Any, params: Any) -> None: ...
    def outgoing_error_response(self, request_id: Any, error: Error) -> None: ...
    def outgoing_notification(self, method: str, params: Any) -> None: ...
    def incoming_notification(self, method: str, params: Any, unhandled: bool) -> None: ...
    def _broadcast_json(self, data: dict[str, Any]) -> None: ...

class RouterLogger(Logger):
    _loggers: Incomplete
    def __init__(self) -> None: ...
    def append(self, logger: Logger) -> None: ...
    def stderr_message(self, *args: Any, **kwargs: Any) -> None: ...
    def outgoing_response(self, *args: Any, **kwargs: Any) -> None: ...
    def outgoing_error_response(self, *args: Any, **kwargs: Any) -> None: ...
    def outgoing_request(self, *args: Any, **kwargs: Any) -> None: ...
    def outgoing_notification(self, *args: Any, **kwargs: Any) -> None: ...
    def incoming_response(self, *args: Any, **kwargs: Any) -> None: ...
    def incoming_request(self, *args: Any, **kwargs: Any) -> None: ...
    def incoming_notification(self, *args: Any, **kwargs: Any) -> None: ...
    def _foreach(self, method: str, *args: Any, **kwargs: Any) -> None: ...
