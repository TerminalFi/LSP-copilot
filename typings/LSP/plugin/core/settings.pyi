import sublime
from .collections import DottedDict as DottedDict
from .logging import debug as debug
from .types import ClientConfig as ClientConfig, Settings as Settings, SettingsRegistration as SettingsRegistration, debounced as debounced, read_dict_setting as read_dict_setting
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from typing import Any

class LspSettingsChangeListener(metaclass=ABCMeta):
    @abstractmethod
    def on_client_config_updated(self, config_name: str | None = None) -> None: ...
    @abstractmethod
    def on_userprefs_updated(self) -> None: ...

class ClientConfigs:
    all: Incomplete
    external: Incomplete
    _listener: Incomplete
    _clients_hash: Incomplete
    def __init__(self) -> None: ...
    def _notify_clients_listener(self, config_name: str | None = None) -> None: ...
    def _notify_userprefs_listener(self) -> None: ...
    def add_for_testing(self, config: ClientConfig) -> None: ...
    def remove_for_testing(self, config: ClientConfig) -> None: ...
    def add_external_config(self, name: str, s: sublime.Settings, file: str, notify_listener: bool) -> bool: ...
    def remove_external_config(self, name: str) -> None: ...
    def update_external_config(self, name: str, s: sublime.Settings, file: str) -> None: ...
    def update_configs(self) -> None: ...
    def _set_enabled(self, config_name: str, is_enabled: bool) -> None: ...
    def enable(self, config_name: str) -> None: ...
    def disable(self, config_name: str) -> None: ...
    def set_listener(self, listener: LspSettingsChangeListener) -> None: ...

_settings_obj: sublime.Settings | None
_settings: Settings | None
_settings_registration: SettingsRegistration | None
_global_settings: sublime.Settings | None
client_configs: Incomplete

def _on_sublime_settings_changed() -> None: ...
def load_settings() -> None: ...
def unload_settings() -> None: ...
def userprefs() -> Settings: ...
def globalprefs() -> sublime.Settings: ...
def read_client_config(name: str, d: dict[str, Any]) -> ClientConfig: ...
def update_client_config(external_config: ClientConfig, user_override_config: dict[str, Any]) -> ClientConfig: ...
