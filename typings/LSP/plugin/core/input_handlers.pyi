import sublime
import sublime_plugin
from .constants import ST_VERSION as ST_VERSION
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from typing import Any, Callable
from typing_extensions import ParamSpec

ListItemsReturn = list[str] | tuple[list[str], int] | list[tuple[str, Any]] | tuple[list[tuple[str, Any]], int] | list[sublime.ListInputItem] | tuple[list[sublime.ListInputItem], int]
P = ParamSpec('P')

def debounced(user_function: Callable[P, Any]) -> Callable[P, None]: ...

class PreselectedListInputHandler(sublime_plugin.ListInputHandler, metaclass=ABCMeta):
    _window: Incomplete
    _initial_value: Incomplete
    def __init__(self, window: sublime.Window, initial_value: str | sublime.ListInputItem | None = None) -> None: ...
    def list_items(self) -> ListItemsReturn: ...
    def _select_and_reset(self) -> None: ...
    @abstractmethod
    def get_list_items(self) -> ListItemsReturn: ...

class DynamicListInputHandler(sublime_plugin.ListInputHandler, metaclass=ABCMeta):
    command: Incomplete
    args: Incomplete
    text: Incomplete
    listener: Incomplete
    input_view: Incomplete
    def __init__(self, command: sublime_plugin.WindowCommand, args: dict[str, Any]) -> None: ...
    def _attach_listener(self) -> None: ...
    def _detach_listener(self) -> None: ...
    def list_items(self) -> list[sublime.ListInputItem]: ...
    def _select_first_row(self) -> None: ...
    def initial_text(self) -> str: ...
    def initial_selection(self) -> list[tuple[int, int]]: ...
    def validate(self, text: str) -> bool: ...
    def cancel(self) -> None: ...
    def confirm(self, text: str) -> None: ...
    def on_modified(self, text: str) -> None: ...
    def get_list_items(self) -> list[sublime.ListInputItem]: ...
    def update(self, items: list[sublime.ListInputItem]) -> None: ...

class InputListener(sublime_plugin.TextChangeListener):
    weakhandler: Incomplete
    def __init__(self, handler: DynamicListInputHandler) -> None: ...
    @classmethod
    def is_applicable(cls, buffer: sublime.Buffer) -> bool: ...
    def on_text_changed(self, changes: list[sublime.TextChange]) -> None: ...
