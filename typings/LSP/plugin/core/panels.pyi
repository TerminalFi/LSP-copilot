import sublime
from .types import PANEL_FILE_REGEX as PANEL_FILE_REGEX, PANEL_LINE_REGEX as PANEL_LINE_REGEX
from _typeshed import Incomplete
from typing import Iterable

LOG_LINES_LIMIT_SETTING_NAME: str
MAX_LOG_LINES_LIMIT_ON: int
MAX_LOG_LINES_LIMIT_OFF: int
OUTPUT_PANEL_SETTINGS: Incomplete

class PanelName:
    Diagnostics: str
    References: str
    Rename: str
    Log: str

class PanelManager:
    _window: Incomplete
    _rename_panel_buttons: Incomplete
    def __init__(self, window: sublime.Window) -> None: ...
    def destroy_output_panels(self) -> None: ...
    def toggle_output_panel(self, panel_type: str) -> None: ...
    def is_panel_open(self, panel_name: str) -> bool: ...
    def update_log_panel(self, scroll_to_selection: bool = False) -> None: ...
    def ensure_panel(self, name: str, result_file_regex: str, result_line_regex: str, syntax: str, context_menu: str | None = None) -> sublime.View | None: ...
    def ensure_diagnostics_panel(self) -> sublime.View | None: ...
    def ensure_log_panel(self) -> sublime.View | None: ...
    def ensure_references_panel(self) -> sublime.View | None: ...
    def ensure_rename_panel(self) -> sublime.View | None: ...
    def get_panel(self, panel_name: str) -> sublime.View | None: ...
    def _create_panel(self, name: str, result_file_regex: str, result_line_regex: str, syntax: str, context_menu: str | None = None) -> sublime.View | None: ...
    def create_output_panel(self, name: str) -> sublime.View | None: ...
    def show_diagnostics_panel_async(self) -> None: ...
    def hide_diagnostics_panel_async(self) -> None: ...
    def update_rename_panel_buttons(self, phantoms: Iterable[sublime.Phantom]) -> None: ...
