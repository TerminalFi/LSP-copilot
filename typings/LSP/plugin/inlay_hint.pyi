import sublime
from .core.constants import ST_VERSION as ST_VERSION
from .core.css import css as css
from .core.edit import apply_text_edits as apply_text_edits
from .core.protocol import InlayHint as InlayHint, InlayHintLabelPart as InlayHintLabelPart, MarkupContent as MarkupContent, Request as Request
from .core.registry import LspTextCommand as LspTextCommand, LspWindowCommand as LspWindowCommand
from .core.sessions import Session as Session
from .core.settings import userprefs as userprefs
from .core.views import position_to_offset as position_to_offset

class LspToggleInlayHintsCommand(LspWindowCommand):
    capability: str
    def __init__(self, window: sublime.Window) -> None: ...
    @staticmethod
    def _get_default_value() -> bool: ...
    def run(self, enable: bool | None = None) -> None: ...
    def is_checked(self) -> bool: ...

class LspInlayHintClickCommand(LspTextCommand):
    capability: str
    def run(self, _edit: sublime.Edit, session_name: str, inlay_hint: InlayHint, phantom_uuid: str, event: dict | None = None, label_part: InlayHintLabelPart | None = None) -> None: ...
    def handle(self, session_name: str, inlay_hint: InlayHint, phantom_uuid: str, label_part: InlayHintLabelPart | None = None) -> None: ...
    def handle_inlay_hint_text_edits(self, session_name: str, inlay_hint: InlayHint, phantom_uuid: str) -> None: ...
    def handle_label_part_command(self, session_name: str, label_part: InlayHintLabelPart | None = None) -> None: ...

def inlay_hint_to_phantom(view: sublime.View, inlay_hint: InlayHint, session: Session) -> sublime.Phantom: ...
def get_inlay_hint_html(view: sublime.View, inlay_hint: InlayHint, session: Session, phantom_uuid: str) -> str: ...
def format_inlay_hint_tooltip(tooltip: str | MarkupContent | None) -> str: ...
def format_inlay_hint_label(inlay_hint: InlayHint, session: Session, phantom_uuid: str) -> str: ...
