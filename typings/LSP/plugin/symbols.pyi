import sublime
import sublime_plugin
from .core.constants import SYMBOL_KINDS as SYMBOL_KINDS
from .core.input_handlers import DynamicListInputHandler as DynamicListInputHandler, PreselectedListInputHandler as PreselectedListInputHandler
from .core.promise import Promise as Promise
from .core.protocol import DocumentSymbol as DocumentSymbol, DocumentSymbolParams as DocumentSymbolParams, Location as Location, Point as Point, Range as Range, Request as Request, SymbolInformation as SymbolInformation, SymbolKind as SymbolKind, SymbolTag as SymbolTag, WorkspaceSymbol as WorkspaceSymbol
from .core.registry import LspTextCommand as LspTextCommand, LspWindowCommand as LspWindowCommand
from .core.sessions import print_to_status_bar as print_to_status_bar
from .core.views import offset_to_point as offset_to_point, range_to_region as range_to_region, text_document_identifier as text_document_identifier
from _typeshed import Incomplete
from typing import Any
from typing_extensions import NotRequired, TypeGuard, TypedDict

SUPPRESS_INPUT_SETTING_KEY: str
SYMBOL_KIND_NAMES: dict[SymbolKind, str]

class DocumentSymbolValue(TypedDict):
    deprecated: bool
    kind: int
    range: Range

class WorkspaceSymbolValue(TypedDict):
    deprecated: bool
    kind: int
    location: NotRequired[Location]
    session: str
    workspaceSymbol: NotRequired[WorkspaceSymbol]

def is_document_symbol_value(val: Any) -> TypeGuard[DocumentSymbolValue]: ...
def symbol_to_list_input_item(item: DocumentSymbol | WorkspaceSymbol | SymbolInformation, hierarchy: str = '', session_name: str | None = None) -> sublime.ListInputItem: ...

class LspSelectionClearCommand(sublime_plugin.TextCommand):
    def run(self, _: sublime.Edit) -> None: ...

class LspSelectionAddCommand(sublime_plugin.TextCommand):
    def run(self, _: sublime.Edit, regions: list[tuple[int, int]]) -> None: ...

class LspSelectionSetCommand(sublime_plugin.TextCommand):
    def run(self, _: sublime.Edit, regions: list[tuple[int, int]]) -> None: ...

class LspDocumentSymbolsCommand(LspTextCommand):
    capability: str
    items: Incomplete
    kind: int
    cached: bool
    has_matching_symbols: bool
    def __init__(self, view: sublime.View) -> None: ...
    def run(self, edit: sublime.Edit, event: dict[str, Any] | None = None, kind: int = 0, index: int | None = None) -> None: ...
    def input(self, args: dict) -> sublime_plugin.CommandInputHandler | None: ...
    def handle_response_async(self, response: list[DocumentSymbol] | list[SymbolInformation] | None) -> None: ...
    def handle_response_error(self, error: Any) -> None: ...
    def _reset_suppress_input(self) -> None: ...
    def process_document_symbol_recursive(self, item: DocumentSymbol, hierarchy: str = '') -> list[sublime.ListInputItem]: ...

class DocumentSymbolsKindInputHandler(PreselectedListInputHandler):
    view: Incomplete
    items: Incomplete
    old_selection: Incomplete
    last_selected: int
    def __init__(self, window: sublime.Window, initial_value: sublime.ListInputItem, view: sublime.View, items: list[sublime.ListInputItem]) -> None: ...
    def name(self) -> str: ...
    def placeholder(self) -> str: ...
    def get_list_items(self) -> tuple[list[sublime.ListInputItem], int]: ...
    def confirm(self, text: int) -> None: ...
    def next_input(self, args: dict) -> sublime_plugin.CommandInputHandler | None: ...

class DocumentSymbolsInputHandler(sublime_plugin.ListInputHandler):
    view: Incomplete
    kind: Incomplete
    items: Incomplete
    old_selection: Incomplete
    def __init__(self, view: sublime.View, kind: int, items: list[sublime.ListInputItem], old_selection: list[sublime.Region]) -> None: ...
    def name(self) -> str: ...
    def list_items(self) -> tuple[list[sublime.ListInputItem], int]: ...
    def preview(self, text: DocumentSymbolValue | None) -> str | sublime.Html | None: ...
    def cancel(self) -> None: ...

class LspWorkspaceSymbolsCommand(LspWindowCommand):
    capability: str
    def run(self, symbol: WorkspaceSymbolValue) -> None: ...
    def input(self, args: dict[str, Any]) -> sublime_plugin.ListInputHandler | None: ...
    def _on_resolved_symbol_async(self, session_name: str, response: WorkspaceSymbol) -> None: ...

class WorkspaceSymbolsInputHandler(DynamicListInputHandler):
    def name(self) -> str: ...
    def placeholder(self) -> str: ...
    def preview(self, text: WorkspaceSymbolValue | None) -> str | sublime.Html | None: ...
    command: Incomplete
    def on_modified(self, text: str) -> None: ...
    def _handle_response_async(self, session_name: str, response: list[SymbolInformation] | list[WorkspaceSymbol] | None) -> list[sublime.ListInputItem]: ...
    def _on_all_responses(self, change_count: int, item_lists: list[list[sublime.ListInputItem]]) -> None: ...
