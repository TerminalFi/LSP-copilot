import sublime
from .core.constants import CODE_LENS_ENABLED_KEY as CODE_LENS_ENABLED_KEY
from .core.protocol import CodeLens as CodeLens, CodeLensExtended as CodeLensExtended, Error as Error
from .core.registry import LspTextCommand as LspTextCommand, LspWindowCommand as LspWindowCommand, windows as windows
from .core.views import make_command_link as make_command_link, range_to_region as range_to_region
from _typeshed import Incomplete
from typing import Generator, Iterable

class LspToggleCodeLensesCommand(LspWindowCommand):
    capability: str
    @classmethod
    def are_enabled(cls, window: sublime.Window | None) -> bool: ...
    def is_checked(self) -> bool: ...
    def run(self) -> None: ...
    def _update_views_async(self, enable: bool) -> None: ...

class CodeLensData:
    __slots__: Incomplete
    data: Incomplete
    region: Incomplete
    session_name: Incomplete
    annotation: str
    is_resolve_error: bool
    def __init__(self, data: CodeLens, view: sublime.View, session_name: str) -> None: ...
    def __repr__(self) -> str: ...
    def is_resolved(self) -> bool: ...
    def to_lsp(self) -> CodeLensExtended: ...
    @property
    def small_html(self) -> str: ...
    def resolve_annotation(self, view_id: int) -> None: ...
    def resolve(self, view: sublime.View, code_lens_or_error: CodeLens | Error) -> None: ...

class CodeLensView:
    CODE_LENS_KEY: str
    view: Incomplete
    _init: bool
    _phantom: Incomplete
    _code_lenses: Incomplete
    def __init__(self, view: sublime.View) -> None: ...
    def clear(self) -> None: ...
    def is_empty(self) -> bool: ...
    def is_initialized(self) -> bool: ...
    def _clear_annotations(self) -> None: ...
    def _region_key(self, session_name: str, index: int) -> str: ...
    def clear_view(self) -> None: ...
    def handle_response(self, session_name: str, response: list[CodeLens]) -> None: ...
    def _flat_iteration(self) -> Iterable[CodeLensData]: ...
    def unresolved_visible_code_lenses(self, visible: sublime.Region) -> Iterable[CodeLensData]: ...
    def _get_phantom_region(self, region: sublime.Region) -> sublime.Region: ...
    def render(self, mode: str) -> None: ...
    def get_resolved_code_lenses_for_region(self, region: sublime.Region) -> Generator[CodeLensExtended, None, None]: ...

class LspCodeLensCommand(LspTextCommand):
    def run(self, edit: sublime.Edit) -> None: ...
    def want_event(self) -> bool: ...
    def on_select(self, code_lenses: list[CodeLensExtended], index: int) -> None: ...
