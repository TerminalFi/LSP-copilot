from sublime import Buffer, CompletionItem, CompletionList, Edit, Html, ListInputItem, Settings, TextChange, View, Window
from typing import Any

view_event_listeners: dict[int, list[ViewEventListener]]

class CommandInputHandler:
    def name(self) -> str: ...
    def placeholder(self) -> str: ...
    def initial_text(self) -> str: ...
    def initial_selection(self) -> list[tuple[int, int]]: ...
    def preview(self, text: str) -> str | Html: ...
    def validate(self, text: str) -> bool: ...
    def cancel(self) -> None: ...
    def confirm(self, text: str) -> None: ...
    def next_input(self, args: Any) -> CommandInputHandler | None: ...
    def want_event(self) -> bool: ...

class BackInputHandler(CommandInputHandler): ...

class TextInputHandler(CommandInputHandler):
    def description(self, text: str) -> str: ...

class ListInputHandler(CommandInputHandler):
    def list_items(self) -> list[str] | tuple[list[str], int] | list[tuple[str, Any]] | tuple[list[tuple[str, Any]], int] | list[ListInputItem] | tuple[list[ListInputItem], int]: ...
    def description(self, value: Any, text: str) -> str: ...

class Command:
    def name(self) -> str: ...
    def is_enabled(self, **kwargs: dict[str, Any]) -> bool: ...
    def is_visible(self, **kwargs: dict[str, Any]) -> bool: ...
    def is_checked(self, **kwargs: dict[str, Any]) -> bool: ...
    def description(self, **kwargs: dict[str, Any]) -> str | None: ...
    def want_event(self) -> bool: ...
    def input(self, args: dict[str, Any]) -> CommandInputHandler | None: ...
    def input_description(self) -> str: ...
    def run(self, **kwargs: dict[str, Any]) -> None: ...

class ApplicationCommand(Command): ...

class WindowCommand(Command):
    window: Window
    def __init__(self, window: Window) -> None: ...

class TextCommand(Command):
    view: View
    def __init__(self, view: View) -> None: ...
    def run(self, edit: Edit, **kwargs: dict[str, Any]) -> None: ...

class EventListener:
    def on_init(self, views: list[View]) -> None: ...
    def on_exit(self) -> None: ...
    def on_new(self, view: View) -> None: ...
    def on_new_async(self, view: View) -> None: ...
    def on_associate_buffer(self, buffer: Buffer) -> None: ...
    def on_associate_buffer_async(self, buffer: Buffer) -> None: ...
    def on_clone(self, view: View) -> None: ...
    def on_clone_async(self, view: View) -> None: ...
    def on_load(self, view: View) -> None: ...
    def on_load_async(self, view: View) -> None: ...
    def on_reload(self, view: View) -> None: ...
    def on_reload_async(self, view: View) -> None: ...
    def on_revert(self, view: View) -> None: ...
    def on_revert_async(self, view: View) -> None: ...
    def on_pre_move(self, view: View) -> None: ...
    def on_post_move(self, view: View) -> None: ...
    def on_post_move_async(self, view: View) -> None: ...
    def on_pre_close(self, view: View) -> None: ...
    def on_close(self, view: View) -> None: ...
    def on_pre_save(self, view: View) -> None: ...
    def on_pre_save_async(self, view: View) -> None: ...
    def on_post_save(self, view: View) -> None: ...
    def on_post_save_async(self, view: View) -> None: ...
    def on_modified(self, view: View) -> None: ...
    def on_modified_async(self, view: View) -> None: ...
    def on_selection_modified(self, view: View) -> None: ...
    def on_selection_modified_async(self, view: View) -> None: ...
    def on_activated(self, view: View) -> None: ...
    def on_activated_async(self, view: View) -> None: ...
    def on_deactivated(self, view: View) -> None: ...
    def on_deactivated_async(self, view: View) -> None: ...
    def on_hover(self, view: View, point: int, hover_zone: int) -> None: ...
    def on_query_context(self, view: View, key: str, operator: int, operand: str, match_all: bool) -> bool | None: ...
    def on_query_completions(self, view: View, prefix: str, locations: list[int]) -> list[str] | tuple[list[str], int] | list[tuple[str, str]] | tuple[list[tuple[str, str]], int] | list[CompletionItem] | tuple[list[CompletionItem], int] | CompletionList | None: ...
    def on_text_command(self, view: View, command_name: str, args: dict[str, Any]) -> tuple[str, dict[str, Any]] | None: ...
    def on_window_command(self, window: Window, command_name: str, args: dict[str, Any]) -> tuple[str, dict[str, Any]] | None: ...
    def on_post_text_command(self, view: View, command_name: str, args: dict[str, Any]) -> None: ...
    def on_post_window_command(self, window: Window, command_name: str, args: dict[str, Any]) -> None: ...
    def on_new_window(self, window: Window) -> None: ...
    def on_new_window_async(self, window: Window) -> None: ...
    def on_pre_close_window(self, window: Window) -> None: ...
    def on_new_project(self, window: Window) -> None: ...
    def on_new_project_async(self, window: Window) -> None: ...
    def on_load_project(self, window: Window) -> None: ...
    def on_load_project_async(self, window: Window) -> None: ...
    def on_pre_save_project(self, window: Window) -> None: ...
    def on_post_save_project(self, window: Window) -> None: ...
    def on_post_save_project_async(self, window: Window) -> None: ...
    def on_pre_close_project(self, window: Window) -> None: ...

class ViewEventListener:
    view: View
    @classmethod
    def is_applicable(cls, settings: Settings) -> bool: ...
    @classmethod
    def applies_to_primary_view_only(cls) -> bool: ...
    def __init__(self, view: View) -> None: ...
    def on_load(self) -> None: ...
    def on_load_async(self) -> None: ...
    def on_reload(self) -> None: ...
    def on_reload_async(self) -> None: ...
    def on_revert(self) -> None: ...
    def on_revert_async(self) -> None: ...
    def on_pre_move(self) -> None: ...
    def on_post_move(self) -> None: ...
    def on_post_move_async(self) -> None: ...
    def on_pre_close(self) -> None: ...
    def on_close(self) -> None: ...
    def on_pre_save(self) -> None: ...
    def on_pre_save_async(self) -> None: ...
    def on_post_save(self) -> None: ...
    def on_post_save_async(self) -> None: ...
    def on_modified(self) -> None: ...
    def on_modified_async(self) -> None: ...
    def on_selection_modified(self) -> None: ...
    def on_selection_modified_async(self) -> None: ...
    def on_activated(self) -> None: ...
    def on_activated_async(self) -> None: ...
    def on_deactivated(self) -> None: ...
    def on_deactivated_async(self) -> None: ...
    def on_hover(self, point: int, hover_zone: int) -> None: ...
    def on_query_context(self, key: str, operator: int, operand: str, match_all: bool) -> bool | None: ...
    def on_query_completions(self, prefix: str, locations: list[int]) -> list[str] | tuple[list[str], int] | list[tuple[str, str]] | tuple[list[tuple[str, str]], int] | list[CompletionItem] | tuple[list[CompletionItem], int] | CompletionList | None: ...
    def on_text_command(self, command_name: str, args: dict[str, Any]) -> tuple[str, dict[str, Any]] | None: ...
    def on_post_text_command(self, command_name: str, args: dict[str, Any]) -> None: ...

class TextChangeListener:
    buffer: Buffer
    @classmethod
    def is_applicable(cls, buffer: Buffer) -> bool: ...
    def __init__(self) -> None: ...
    def detach(self) -> None: ...
    def attach(self, buffer: Buffer) -> None: ...
    def is_attached(self) -> bool: ...
    def on_text_changed(self, changes: list[TextChange]) -> None: ...
    def on_text_changed_async(self, changes: list[TextChange]) -> None: ...
    def on_revert(self) -> None: ...
    def on_revert_async(self) -> None: ...
    def on_reload(self) -> None: ...
    def on_reload_async(self) -> None: ...
