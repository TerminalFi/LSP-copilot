from _typeshed import Incomplete
from setup import TextDocumentTestCase
from typing import Generator, Iterable

SELFDIR: Incomplete
TEST_FILE_PATH: Incomplete
GOTO_RESPONSE: Incomplete
GOTO_RESPONSE_LOCATION_LINK: Incomplete
GOTO_CONTENT: str

class SingleDocumentTestCase(TextDocumentTestCase):
    def test_did_open(self) -> None: ...
    def test_out_of_bounds_column_for_text_document_edit(self) -> None: ...
    def test_did_close(self) -> Generator: ...
    def test_sends_save_with_purge(self) -> Generator: ...
    def test_formats_on_save(self) -> Generator: ...
    def test_hover_info(self) -> Generator: ...
    def test_remove_line_and_then_insert_at_that_line_at_end(self) -> Generator: ...
    def test_apply_formatting(self) -> Generator: ...
    def test_apply_formatting_and_preserve_order(self) -> Generator: ...
    def test_tabs_are_respected_even_when_translate_tabs_to_spaces_is_set_to_true(self) -> Generator: ...
    def __run_formatting_test(self, original: Iterable[str], expected: Iterable[str], file_changes: list[tuple[tuple[int, int], tuple[int, int], str]]) -> Generator: ...
    def __run_goto_test(self, response: list, text_document_request: str, subl_command_suffix: str) -> Generator: ...
    def test_definition(self) -> Generator: ...
    def test_definition_location_link(self) -> Generator: ...
    def test_type_definition(self) -> Generator: ...
    def test_type_definition_location_link(self) -> Generator: ...
    def test_declaration(self) -> Generator: ...
    def test_declaration_location_link(self) -> Generator: ...
    def test_implementation(self) -> Generator: ...
    def test_implementation_location_link(self) -> Generator: ...
    def test_expand_selection(self) -> Generator: ...
    def test_rename(self) -> Generator: ...
    def test_run_command(self) -> Generator: ...
    def test_progress(self) -> Generator: ...

class SingleDocumentTestCase2(TextDocumentTestCase):
    maxDiff: Incomplete
    def test_did_change(self) -> Generator: ...

class SingleDocumentTestCase3(TextDocumentTestCase):
    @classmethod
    def get_test_name(cls) -> str: ...
    def test_did_change_before_did_close(self) -> Generator: ...

class WillSaveWaitUntilTestCase(TextDocumentTestCase):
    @classmethod
    def get_test_server_capabilities(cls) -> dict: ...
    def test_will_save_wait_until(self) -> Generator: ...
