from _typeshed import Incomplete
from socketserver import StreamRequestHandler, TCPServer, ThreadingMixIn

logger: Incomplete
FIN: int
OPCODE: int
MASKED: int
PAYLOAD_LEN: int
PAYLOAD_LEN_EXT16: int
PAYLOAD_LEN_EXT64: int
OPCODE_CONTINUATION: int
OPCODE_TEXT: int
OPCODE_BINARY: int
OPCODE_CLOSE_CONN: int
OPCODE_PING: int
OPCODE_PONG: int

class API:
    def run_forever(self) -> None: ...
    def new_client(self, client, server) -> None: ...
    def client_left(self, client, server) -> None: ...
    def message_received(self, client, server, message) -> None: ...
    def set_fn_new_client(self, fn) -> None: ...
    def set_fn_client_left(self, fn) -> None: ...
    def set_fn_message_received(self, fn) -> None: ...
    def send_message(self, client, msg) -> None: ...
    def send_message_to_all(self, msg) -> None: ...

class WebsocketServer(ThreadingMixIn, TCPServer, API):
    allow_reuse_address: bool
    daemon_threads: bool
    clients: Incomplete
    id_counter: int
    port: Incomplete
    def __init__(self, port, host: str = '127.0.0.1', loglevel=...) -> None: ...
    def _message_received_(self, handler, msg) -> None: ...
    def _ping_received_(self, handler, msg) -> None: ...
    def _pong_received_(self, handler, msg) -> None: ...
    def _new_client_(self, handler) -> None: ...
    def _client_left_(self, handler) -> None: ...
    def _unicast_(self, to_client, msg) -> None: ...
    def _multicast_(self, msg) -> None: ...
    def handler_to_client(self, handler): ...

class WebSocketHandler(StreamRequestHandler):
    server: Incomplete
    def __init__(self, socket, addr, server) -> None: ...
    keep_alive: bool
    handshake_done: bool
    valid_client: bool
    def setup(self) -> None: ...
    def handle(self) -> None: ...
    def read_bytes(self, num): ...
    def read_next_message(self) -> None: ...
    def send_message(self, message) -> None: ...
    def send_pong(self, message) -> None: ...
    def send_text(self, message, opcode=...): ...
    def read_http_headers(self): ...
    def handshake(self) -> None: ...
    @classmethod
    def make_handshake_response(cls, key): ...
    @classmethod
    def calculate_response_key(cls, key): ...
    def finish(self) -> None: ...

def encode_to_UTF8(data): ...
def try_decode_UTF8(data): ...
