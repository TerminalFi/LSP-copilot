import sublime
import unittest
from LSP.plugin.core.protocol import Diagnostic as Diagnostic, DocumentUri as DocumentUri, Error as Error
from LSP.plugin.core.sessions import Logger, Manager, Session
from LSP.plugin.core.types import ClientConfig
from _typeshed import Incomplete
from typing import Any, Generator

class MockManager(Manager):
    _window: Incomplete
    def __init__(self, window: sublime.Window) -> None: ...
    def window(self) -> sublime.Window: ...
    def sessions(self, view: sublime.View, capability: str | None = None) -> Generator[Session, None, None]: ...
    def get_session(self, config_name: str, file_path: str) -> Session | None: ...
    def get_project_path(self, file_name: str) -> str | None: ...
    def should_ignore_diagnostics(self, uri: DocumentUri, configuration: ClientConfig) -> str | None: ...
    def start_async(self, configuration: ClientConfig, initiating_view: sublime.View) -> None: ...
    def on_post_exit_async(self, session: Session, exit_code: int, exception: Exception | None) -> None: ...
    def on_diagnostics_updated(self) -> None: ...

class MockLogger(Logger):
    def stderr_message(self, message: str) -> None: ...
    def outgoing_response(self, request_id: Any, params: Any) -> None: ...
    def outgoing_error_response(self, request_id: Any, error: Error) -> None: ...
    def outgoing_request(self, request_id: int, method: str, params: Any, blocking: bool) -> None: ...
    def outgoing_notification(self, method: str, params: Any) -> None: ...
    def incoming_response(self, request_id: int | None, params: Any, is_error: bool, blocking: bool) -> None: ...
    def incoming_request(self, request_id: Any, method: str, params: Any) -> None: ...
    def incoming_notification(self, method: str, params: Any, unhandled: bool) -> None: ...

class MockSessionBuffer:
    session: Incomplete
    session_views: Incomplete
    mock_uri: Incomplete
    mock_language_id: Incomplete
    def __init__(self, session: Session, mock_uri: str, mock_language_id: str) -> None: ...
    def get_uri(self) -> DocumentUri | None: ...
    def get_language_id(self) -> str | None: ...
    def register_capability_async(self, registration_id: str, capability_path: str, registration_path: str, options: dict[str, Any]) -> None: ...
    def unregister_capability_async(self, registration_id: str, capability_path: str, registration_path: str) -> None: ...
    def on_diagnostics_async(self, raw_diagnostics: list[Diagnostic], version: int | None) -> None: ...

class SessionTest(unittest.TestCase):
    def test_experimental_capabilities(self) -> None: ...
    def test_initialize_params(self) -> None: ...
    def test_document_sync_capabilities(self) -> None: ...
    def test_get_session_buffer_for_uri_with_nonfiles(self) -> None: ...
    def test_get_session_buffer_for_uri_with_files(self) -> None: ...
