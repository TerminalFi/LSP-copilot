from LSP.plugin.core.typing import Any as Any, Callable, Dict as Dict, List as List, Optional as Optional, Tuple
from _typeshed import Incomplete

StringCallback = Callable[[str], None]
SemanticVersion = Tuple[int, int, int]
is_windows: Incomplete

def run_command_sync(args: List[str], cwd: Optional[str] = None, extra_env: Optional[Dict[str, str]] = None, extra_paths: List[str] = [], shell: bool = ...) -> Tuple[str, Optional[str]]: ...
def run_command_async(args: List[str], on_success: StringCallback, on_error: StringCallback, **kwargs: Any) -> None: ...
def decode_bytes(data: bytes) -> str: ...
def rmtree_ex(path: str, ignore_errors: bool = False) -> None: ...
def version_to_string(version: SemanticVersion) -> str: ...
def log_and_show_message(message: str, additional_logs: Optional[str] = None, show_in_status: bool = True) -> None: ...
