import abc
import sublime
from ..api_wrapper_interface import ApiWrapperInterface
from .interface import ClientHandlerInterface
from LSP.plugin import AbstractPlugin, ClientConfig, Session, WorkspaceFolder
from LSP.plugin.core.typing import Any, Callable, Dict, List, Optional, Tuple
from _typeshed import Incomplete
from weakref import ref

__all__ = ['ClientHandler']

ApiNotificationHandler = Callable[[Any], None]
ApiRequestHandler = Callable[[Any, Callable[[Any], None]], None]

class ApiWrapper(ApiWrapperInterface):
    __plugin: Incomplete
    def __init__(self, plugin: ref[AbstractPlugin]) -> None: ...
    def __session(self) -> Optional[Session]: ...
    def on_notification(self, method: str, handler: ApiNotificationHandler) -> None: ...
    def on_request(self, method: str, handler: ApiRequestHandler) -> None: ...
    def send_notification(self, method: str, params: Any) -> None: ...
    def send_request(self, method: str, params: Any, handler: Callable[[Any, bool], None]) -> None: ...

class ClientHandler(AbstractPlugin, ClientHandlerInterface, metaclass=abc.ABCMeta):
    @classmethod
    def name(cls) -> str: ...
    @classmethod
    def configuration(cls) -> Tuple[sublime.Settings, str]: ...
    @classmethod
    def additional_variables(cls) -> Dict[str, str]: ...
    @classmethod
    def needs_update_or_installation(cls) -> bool: ...
    @classmethod
    def install_or_update(cls) -> None: ...
    @classmethod
    def can_start(cls, window: sublime.Window, initiating_view: sublime.View, workspace_folders: List[WorkspaceFolder], configuration: ClientConfig) -> Optional[str]: ...
    @classmethod
    def on_pre_start(cls, window: sublime.Window, initiating_view: sublime.View, workspace_folders: List[WorkspaceFolder], configuration: ClientConfig) -> Optional[str]: ...
    @classmethod
    def setup(cls) -> None: ...
    @classmethod
    def cleanup(cls) -> None: ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
