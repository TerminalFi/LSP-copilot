from .server_resource_interface import ServerResourceInterface
from LSP.plugin.core.typing import Any, Optional
from _typeshed import Incomplete

__all__ = ['ServerPipResource']

class ServerPipResource(ServerResourceInterface):
    @classmethod
    def file_extension(cls) -> str: ...
    @classmethod
    def run(cls, *args: Any, cwd: Optional[str] = None) -> str: ...
    _storage_path: Incomplete
    _package_name: Incomplete
    _requirements_path_relative: Incomplete
    _requirements_path: Incomplete
    _server_binary_filename: Incomplete
    _python_binary: Incomplete
    _status: Incomplete
    def __init__(self, storage_path: str, package_name: str, requirements_path: str, server_binary_filename: str, python_binary: str) -> None: ...
    def basedir(self) -> str: ...
    def bindir(self) -> str: ...
    def server_binary(self) -> str: ...
    def pip_binary(self) -> str: ...
    def python_version(self) -> str: ...
    @property
    def binary_path(self) -> str: ...
    def get_status(self) -> int: ...
    def needs_installation(self) -> bool: ...
    def install_or_update(self) -> None: ...
