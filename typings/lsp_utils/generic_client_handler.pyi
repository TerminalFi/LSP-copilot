import sublime
from ._client_handler import ClientHandler
from .api_wrapper_interface import ApiWrapperInterface
from .server_resource_interface import ServerResourceInterface
from LSP.plugin import ClientConfig, DottedDict, WorkspaceFolder
from LSP.plugin.core.typing import Any, Dict, List, Optional, Tuple
from abc import ABCMeta

__all__ = ['GenericClientHandler']

class GenericClientHandler(ClientHandler, metaclass=ABCMeta):
    package_name: str
    @classmethod
    def setup(cls) -> None: ...
    @classmethod
    def cleanup(cls) -> None: ...
    @classmethod
    def get_displayed_name(cls) -> str: ...
    @classmethod
    def storage_path(cls) -> str: ...
    @classmethod
    def package_storage(cls) -> str: ...
    @classmethod
    def get_command(cls) -> List[str]: ...
    @classmethod
    def binary_path(cls) -> str: ...
    @classmethod
    def get_binary_arguments(cls) -> List[str]: ...
    @classmethod
    def read_settings(cls) -> Tuple[sublime.Settings, str]: ...
    @classmethod
    def get_additional_variables(cls) -> Dict[str, str]: ...
    @classmethod
    def get_additional_paths(cls) -> List[str]: ...
    @classmethod
    def manages_server(cls) -> bool: ...
    @classmethod
    def get_server(cls) -> Optional[ServerResourceInterface]: ...
    @classmethod
    def on_settings_read(cls, settings: sublime.Settings) -> bool: ...
    @classmethod
    def is_allowed_to_start(cls, window: sublime.Window, initiating_view: sublime.View, workspace_folders: List[WorkspaceFolder], configuration: ClientConfig) -> Optional[str]: ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def on_ready(self, api: ApiWrapperInterface) -> None: ...
    def on_settings_changed(self, settings: DottedDict) -> None: ...
